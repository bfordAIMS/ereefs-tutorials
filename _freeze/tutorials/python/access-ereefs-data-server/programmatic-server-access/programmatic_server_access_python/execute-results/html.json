{
  "hash": "1d5b775643b171d481e69d3ff3ddeb6e",
  "result": {
    "markdown": "---\ntitle: \"Access eReefs data\"\nsubtitle: \"Programmatic server access {{< fa brands python >}}\"\n---\n\n\n:::{.tutorial-description}\nLearn how to extract eReefs data from the AIMS server for multiple dates and points with OPeNDAP in {{< fa brands python >}} python.\n:::\n\n\n::: {.cell}\n\n:::\n\n\n:::{.callout-note appearance=\"simple\"}\nThis tutorial builds on the techniques introduced in [Access eReefs data: Basic server access {{< fa brands python >}}](../basic-server-access/basic_server_access_python.qmd).\n:::\n\nIn this tutorial we will look at how to get eReefs data from the [AIMS server](http://thredds.ereefs.aims.gov.au/thredds/catalog.html) corresponding to the logged locations of tagged marine animals. Keep in mind, however, that the same methodology can be applied in any situation where we wish to extract eReefs data for a range of points with different dates of interest for each point. \n\n## Python modules\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd  # for data analysis\nimport numpy as np  # for quik maths\nfrom janitor import clean_names  # to create consitent, 'clean' variable names\nimport folium  # a python API to interactive leaflet maps\nimport datetime as dt # to time how long the data export takes\nfrom IPython.display import HTML # to render, i.e. 'display', html tables\nfrom netCDF4 import Dataset\n```\n:::\n\n\n## Motivating problem\n\nThe tracking of marine animals is commonly used by researchers to gain insights into the distribution, biology, behaviour and ecology of different species. However, knowing where an animal was at a certain point in time is only one piece of the puzzle. To start to understand *why* an animal was where it was, we usually require information on things like: What type of habitat is present at the location? What were the environmental conditions like at the time? What other lifeforms were present at the tracked location (e.g. for food or mating)?\n\nIn this tutorial we will pretend that we have tracking data for Loggerhead Sea Turtles and wish to get eReefs data corresponding to the tracked points (in time and space) to understand more about the likely environmental conditions experienced by our turtles. \n\n<details><summary>Read more: Tracking marine animals</summary>\n\nMarine animals are typically tracked using either acoustic or satellite tags. These tags are attached to the animals and transmit signals back to recievers, logging the animal's location at different points in time. In some cases other data such as depth, temperature, and animal movement profiles are recorded and the data transmitted to the recievers whenever possible. \n\nAcoustic tracking requires a network of recievers to be placed in the ocean in order to pick up the tags' transmitted signals when they come within range (typically around 500 m). Acoustic tracking has the advantage of being able transmit and recieve signals underwater, however is limited by the coverage of the reciever network. In some instances, researchers do without the reciever network and follow the animals around in a boat to receive the data. The suitability of acoustic tracking depends on the study species and research question. \n\nSatellite tracking, on the other hand, is able to track animals over virtually the entire ocean as the tags transmit signals to a network of satellites orbiting the earth. However, unlike acoustic tags, the signals cannot be transmitted through water and the tagged animals must breach the ocean surface in order to have their location logged and any other recorded data be received. The accuracy of the logged location depends on the quality of the transmitted signal. For high-quality signals, the location uncertainty can be in the hundreds of metres, however for bad quality signals this can blow out to over 10 km.\n\n</details>\n\n## Example tracking data\n\nWe will use satellite tracking data for Loggerhead Sea Turtles (*Caretta caretta*) provided in [Strydom (2022)](https://doi.org/10.15468/k4s6ap). This data contains tracking detections which span the length of the Great Barrier Reef off the east coast of Queensland Australia from December 2021 to April 2022 (shown in @fig-data-map).\n\n:::{.callout-caution appearance=\"simple\"}\nThis dataset is a summarized representation of the tracking locations per 1-degree cell. This implies a coordinate uncertainty of roughly 110 km. This level of uncertainty renders the data virtually useless for most practical applications, though it will suffice for the purposes of this tutorial. Records which are landbased as a result of the uncertainty have been removed and from here on in we will just pretend that the coordinates are accurate.\n:::\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Read in data\ndata = pd.read_csv(\"data/Loggerhead_Sea_Turtle_satellite_tracking_detections__Strydom_2022_DOI10-15468-k4s6ap.csv\")\n\n# Convert columns names from camelCase to snake_case\ndata = data.clean_names(case_type = \"snake\")\n\n# Rename some variables for easier use\ndata = data.rename(columns = {\n  \"gbif_id\": \"record_id\", \n  \"decimal_latitude\": \"latitude\", \n  \"decimal_longitude\": \"longitude\", \n  \"event_date\": \"date_time\"\n})\n\n# Ensure date_time is in the datetime data format\ndata['date_time'] = pd.to_datetime(data['date_time'])\n\n# Seperate date_time into date and time variables\ndata = data.assign(\n  date = data['date_time'].dt.strftime(\"%Y-%m-%d\"), \n  time = data['date_time'].dt.strftime(\"%H:%M\")\n)\n\n# Remove land based records (as a result of coordinate uncertainty)\nland_based_records = [4022992331, 4022992326, 4022992312, 4022992315, 4022992322, 4022992306]\ndata = data.query(\"record_id not in @land_based_records\")\n\n# Select the variables relevant to this tutorial\nselect_vars = [\"longitude\", \"latitude\", \"date\", \"time\", \"date_time\",\"record_id\", \"species\"]\ndata = data[select_vars]\n\n# View the tracking locations on an interactive map:\n# Create map centred on the mean coordinates of the tracking locations\ncentre_point = [data['latitude'].mean(), data['longitude'].mean()]\ntrack_map = folium.Map(location = centre_point, zoom_start = 4)\n\n# Add markers to map at each tracking location\nfor row in data.itertuples():\n  coords_i = [row.latitude, row.longitude]\n  marker_i = folium.Marker(location = coords_i, popup = row.date_time)\n  marker_i.add_to(track_map);\n# Note: the trailing ';' above supresses the output of the add marker function (which returns a pointer to the marker in memory)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<folium.map.Marker object at 0x00000276FB363670>\n<folium.map.Marker object at 0x00000276FB3638B0>\n<folium.map.Marker object at 0x00000276FB363970>\n<folium.map.Marker object at 0x00000276FB363520>\n<folium.map.Marker object at 0x00000276FB3609D0>\n<folium.map.Marker object at 0x00000276FB3632E0>\n<folium.map.Marker object at 0x00000276FB361B10>\n<folium.map.Marker object at 0x00000276FB3603A0>\n<folium.map.Marker object at 0x00000276FB3606A0>\n<folium.map.Marker object at 0x00000276FB360130>\n<folium.map.Marker object at 0x00000276FB361810>\n<folium.map.Marker object at 0x00000276FB360E50>\n<folium.map.Marker object at 0x00000276FB3605B0>\n<folium.map.Marker object at 0x00000276FB3BD660>\n<folium.map.Marker object at 0x00000276FB3BD900>\n<folium.map.Marker object at 0x00000276FB3BD030>\n<folium.map.Marker object at 0x00000276FB3BD3F0>\n<folium.map.Marker object at 0x00000276FB3BD7B0>\n<folium.map.Marker object at 0x00000276FB3BD9F0>\n<folium.map.Marker object at 0x00000276FB3BEDD0>\n<folium.map.Marker object at 0x00000276FB3BDC60>\n<folium.map.Marker object at 0x00000276FB3BD8D0>\n<folium.map.Marker object at 0x00000276FB3BE680>\n<folium.map.Marker object at 0x00000276FB3BCFA0>\n<folium.map.Marker object at 0x00000276FB3BD300>\n```\n:::\n\n```{.python .cell-code}\ntrack_map\n```\n\n::: {#fig-data-map .cell-output-display}\n```{=html}\n<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><span style=\"color:#565656\">Make this Notebook Trusted to load map: File -> Trust Notebook</span><iframe srcdoc=\"&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    \n    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;\n    \n        &lt;script&gt;\n            L_NO_TOUCH = false;\n            L_DISABLE_3D = false;\n        &lt;/script&gt;\n    \n    &lt;style&gt;html, body {width: 100%;height: 100%;margin: 0;padding: 0;}&lt;/style&gt;\n    &lt;style&gt;#map {position:absolute;top:0;bottom:0;right:0;left:0;}&lt;/style&gt;\n    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;https://code.jquery.com/jquery-1.12.4.min.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;&gt;&lt;/script&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/&gt;\n    \n            &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,\n                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; /&gt;\n            &lt;style&gt;\n                #map_a52d74270167b75bb18b615b72498562 {\n                    position: relative;\n                    width: 100.0%;\n                    height: 100.0%;\n                    left: 0.0%;\n                    top: 0.0%;\n                }\n                .leaflet-container { font-size: 1rem; }\n            &lt;/style&gt;\n        \n&lt;/head&gt;\n&lt;body&gt;\n    \n    \n            &lt;div class=&quot;folium-map&quot; id=&quot;map_a52d74270167b75bb18b615b72498562&quot; &gt;&lt;/div&gt;\n        \n&lt;/body&gt;\n&lt;script&gt;\n    \n    \n            var map_a52d74270167b75bb18b615b72498562 = L.map(\n                &quot;map_a52d74270167b75bb18b615b72498562&quot;,\n                {\n                    center: [-18.74, 148.42],\n                    crs: L.CRS.EPSG3857,\n                    zoom: 4,\n                    zoomControl: true,\n                    preferCanvas: false,\n                }\n            );\n\n            \n\n        \n    \n            var tile_layer_2e396be942f6edeea2dcc10eec721239 = L.tileLayer(\n                &quot;https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,\n                {&quot;attribution&quot;: &quot;Data by \\u0026copy; \\u003ca target=\\&quot;_blank\\&quot; href=\\&quot;http://openstreetmap.org\\&quot;\\u003eOpenStreetMap\\u003c/a\\u003e, under \\u003ca target=\\&quot;_blank\\&quot; href=\\&quot;http://www.openstreetmap.org/copyright\\&quot;\\u003eODbL\\u003c/a\\u003e.&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 18, &quot;maxZoom&quot;: 18, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}\n            ).addTo(map_a52d74270167b75bb18b615b72498562);\n        \n    \n            var marker_8adf2b07db6ac80d86a51f4870daf2fb = L.marker(\n                [-20.5, 150.5],\n                {}\n            ).addTo(map_a52d74270167b75bb18b615b72498562);\n        \n    \n        var popup_e8d03e1481411bbc0c92bc9106d56f71 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_6b339f7f739c0fe4c68685d509f5706c = $(`&lt;div id=&quot;html_6b339f7f739c0fe4c68685d509f5706c&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;2022-01-17 17:06:32+00:00&lt;/div&gt;`)[0];\n                popup_e8d03e1481411bbc0c92bc9106d56f71.setContent(html_6b339f7f739c0fe4c68685d509f5706c);\n            \n        \n\n        marker_8adf2b07db6ac80d86a51f4870daf2fb.bindPopup(popup_e8d03e1481411bbc0c92bc9106d56f71)\n        ;\n\n        \n    \n    \n            var marker_66d77f229d214e9a50bb99b5a2a541d7 = L.marker(\n                [-25.5, 153.5],\n                {}\n            ).addTo(map_a52d74270167b75bb18b615b72498562);\n        \n    \n        var popup_9fa5db0d3050805d43076f56471846bf = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_38a769e964fdff3eacb5cd9bc0c3cbae = $(`&lt;div id=&quot;html_38a769e964fdff3eacb5cd9bc0c3cbae&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;2022-01-02 21:49:55+00:00&lt;/div&gt;`)[0];\n                popup_9fa5db0d3050805d43076f56471846bf.setContent(html_38a769e964fdff3eacb5cd9bc0c3cbae);\n            \n        \n\n        marker_66d77f229d214e9a50bb99b5a2a541d7.bindPopup(popup_9fa5db0d3050805d43076f56471846bf)\n        ;\n\n        \n    \n    \n            var marker_e99e23708ede7655e8bb89f98950c1d2 = L.marker(\n                [-24.5, 152.5],\n                {}\n            ).addTo(map_a52d74270167b75bb18b615b72498562);\n        \n    \n        var popup_de0617209588fc9f8e75653fe0ed894f = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_2dcc9f2cbf34962f645521c23c8f5161 = $(`&lt;div id=&quot;html_2dcc9f2cbf34962f645521c23c8f5161&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;2021-12-21 17:57:22+00:00&lt;/div&gt;`)[0];\n                popup_de0617209588fc9f8e75653fe0ed894f.setContent(html_2dcc9f2cbf34962f645521c23c8f5161);\n            \n        \n\n        marker_e99e23708ede7655e8bb89f98950c1d2.bindPopup(popup_de0617209588fc9f8e75653fe0ed894f)\n        ;\n\n        \n    \n    \n            var marker_bc1bc1cae466c89cb4ad409e9284e280 = L.marker(\n                [-18.5, 147.5],\n                {}\n            ).addTo(map_a52d74270167b75bb18b615b72498562);\n        \n    \n        var popup_119fb1330faefeb84d2aa54d4f77817b = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_962fb834e4497c285fdcf2f12b89175e = $(`&lt;div id=&quot;html_962fb834e4497c285fdcf2f12b89175e&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;2022-01-27 17:00:04+00:00&lt;/div&gt;`)[0];\n                popup_119fb1330faefeb84d2aa54d4f77817b.setContent(html_962fb834e4497c285fdcf2f12b89175e);\n            \n        \n\n        marker_bc1bc1cae466c89cb4ad409e9284e280.bindPopup(popup_119fb1330faefeb84d2aa54d4f77817b)\n        ;\n\n        \n    \n    \n            var marker_a4decb71e43c6448eff25d21cd4cd1cd = L.marker(\n                [-14.5, 145.5],\n                {}\n            ).addTo(map_a52d74270167b75bb18b615b72498562);\n        \n    \n        var popup_01c4750b67ee6c6bc1c21d9bb2cb2844 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_7ecc98563ff98d1daec7af81ff6c4df9 = $(`&lt;div id=&quot;html_7ecc98563ff98d1daec7af81ff6c4df9&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;2022-02-12 10:34:12+00:00&lt;/div&gt;`)[0];\n                popup_01c4750b67ee6c6bc1c21d9bb2cb2844.setContent(html_7ecc98563ff98d1daec7af81ff6c4df9);\n            \n        \n\n        marker_a4decb71e43c6448eff25d21cd4cd1cd.bindPopup(popup_01c4750b67ee6c6bc1c21d9bb2cb2844)\n        ;\n\n        \n    \n    \n            var marker_5383f81ff1303182ee5ae3fff693c512 = L.marker(\n                [-26.5, 153.5],\n                {}\n            ).addTo(map_a52d74270167b75bb18b615b72498562);\n        \n    \n        var popup_d33317bf38d653975e606886294fba3b = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_6b02223d6ba415de0d9182b2d28875cc = $(`&lt;div id=&quot;html_6b02223d6ba415de0d9182b2d28875cc&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;2022-02-12 08:59:01+00:00&lt;/div&gt;`)[0];\n                popup_d33317bf38d653975e606886294fba3b.setContent(html_6b02223d6ba415de0d9182b2d28875cc);\n            \n        \n\n        marker_5383f81ff1303182ee5ae3fff693c512.bindPopup(popup_d33317bf38d653975e606886294fba3b)\n        ;\n\n        \n    \n    \n            var marker_f4d0dbfb04b274359f39b86591c16530 = L.marker(\n                [-19.5, 148.5],\n                {}\n            ).addTo(map_a52d74270167b75bb18b615b72498562);\n        \n    \n        var popup_899b2381ab6d7e7b073c47f1d7c815a7 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_5ca4c340ceaaa59362400352ed839f25 = $(`&lt;div id=&quot;html_5ca4c340ceaaa59362400352ed839f25&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;2022-01-23 07:02:18+00:00&lt;/div&gt;`)[0];\n                popup_899b2381ab6d7e7b073c47f1d7c815a7.setContent(html_5ca4c340ceaaa59362400352ed839f25);\n            \n        \n\n        marker_f4d0dbfb04b274359f39b86591c16530.bindPopup(popup_899b2381ab6d7e7b073c47f1d7c815a7)\n        ;\n\n        \n    \n    \n            var marker_769505d1e4852bebc8f6e4df8763d2d1 = L.marker(\n                [-10.5, 143.5],\n                {}\n            ).addTo(map_a52d74270167b75bb18b615b72498562);\n        \n    \n        var popup_90d48a8e0fb5d027f0c233fd94fdec5c = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_c8eaf3b3af4cc1e8f669b48b46539fc8 = $(`&lt;div id=&quot;html_c8eaf3b3af4cc1e8f669b48b46539fc8&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;2022-04-14 06:31:48+00:00&lt;/div&gt;`)[0];\n                popup_90d48a8e0fb5d027f0c233fd94fdec5c.setContent(html_c8eaf3b3af4cc1e8f669b48b46539fc8);\n            \n        \n\n        marker_769505d1e4852bebc8f6e4df8763d2d1.bindPopup(popup_90d48a8e0fb5d027f0c233fd94fdec5c)\n        ;\n\n        \n    \n    \n            var marker_49691cdf2755dfe219dd83ceff2a9ff8 = L.marker(\n                [-20.5, 149.5],\n                {}\n            ).addTo(map_a52d74270167b75bb18b615b72498562);\n        \n    \n        var popup_6ce9d5f719b001ac6e2e5e1d381e510f = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_7cbea0459b8665354e41d9a08577a6dd = $(`&lt;div id=&quot;html_7cbea0459b8665354e41d9a08577a6dd&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;2022-01-19 17:44:38+00:00&lt;/div&gt;`)[0];\n                popup_6ce9d5f719b001ac6e2e5e1d381e510f.setContent(html_7cbea0459b8665354e41d9a08577a6dd);\n            \n        \n\n        marker_49691cdf2755dfe219dd83ceff2a9ff8.bindPopup(popup_6ce9d5f719b001ac6e2e5e1d381e510f)\n        ;\n\n        \n    \n    \n            var marker_a20857fb77e328ba64f6d37018725348 = L.marker(\n                [-22.5, 151.5],\n                {}\n            ).addTo(map_a52d74270167b75bb18b615b72498562);\n        \n    \n        var popup_60b2beed317d33d243fc019f79eb5d18 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_21452b083529abb9be07a1857e92f374 = $(`&lt;div id=&quot;html_21452b083529abb9be07a1857e92f374&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;2022-01-09 20:25:01+00:00&lt;/div&gt;`)[0];\n                popup_60b2beed317d33d243fc019f79eb5d18.setContent(html_21452b083529abb9be07a1857e92f374);\n            \n        \n\n        marker_a20857fb77e328ba64f6d37018725348.bindPopup(popup_60b2beed317d33d243fc019f79eb5d18)\n        ;\n\n        \n    \n    \n            var marker_d7f863740b6e318f423c8a9785e44f37 = L.marker(\n                [-21.5, 150.5],\n                {}\n            ).addTo(map_a52d74270167b75bb18b615b72498562);\n        \n    \n        var popup_57d3e3c18a778926aa0a14657ca44704 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_2357a369421e3ac6f3639a99f1e021e2 = $(`&lt;div id=&quot;html_2357a369421e3ac6f3639a99f1e021e2&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;2022-01-14 18:26:17+00:00&lt;/div&gt;`)[0];\n                popup_57d3e3c18a778926aa0a14657ca44704.setContent(html_2357a369421e3ac6f3639a99f1e021e2);\n            \n        \n\n        marker_d7f863740b6e318f423c8a9785e44f37.bindPopup(popup_57d3e3c18a778926aa0a14657ca44704)\n        ;\n\n        \n    \n    \n            var marker_0b5bc602f59710cbcbd7334e65638cba = L.marker(\n                [-11.5, 143.5],\n                {}\n            ).addTo(map_a52d74270167b75bb18b615b72498562);\n        \n    \n        var popup_9864ece9cc162d6f7ea35cea4becd04d = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_0238c1d67460466f1aa3df2cad285f69 = $(`&lt;div id=&quot;html_0238c1d67460466f1aa3df2cad285f69&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;2022-04-09 22:00:54+00:00&lt;/div&gt;`)[0];\n                popup_9864ece9cc162d6f7ea35cea4becd04d.setContent(html_0238c1d67460466f1aa3df2cad285f69);\n            \n        \n\n        marker_0b5bc602f59710cbcbd7334e65638cba.bindPopup(popup_9864ece9cc162d6f7ea35cea4becd04d)\n        ;\n\n        \n    \n    \n            var marker_704ad7f706b388bcbe8fc486eac6b606 = L.marker(\n                [-19.5, 149.5],\n                {}\n            ).addTo(map_a52d74270167b75bb18b615b72498562);\n        \n    \n        var popup_e3203bd7c2418070a614fa33f07bd37c = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_9fda2c7dcf6c00664cd5aa127fea6cee = $(`&lt;div id=&quot;html_9fda2c7dcf6c00664cd5aa127fea6cee&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;2022-01-21 07:22:08+00:00&lt;/div&gt;`)[0];\n                popup_e3203bd7c2418070a614fa33f07bd37c.setContent(html_9fda2c7dcf6c00664cd5aa127fea6cee);\n            \n        \n\n        marker_704ad7f706b388bcbe8fc486eac6b606.bindPopup(popup_e3203bd7c2418070a614fa33f07bd37c)\n        ;\n\n        \n    \n    \n            var marker_750d2c1d7743c06b2a9a96f4bcc72f2b = L.marker(\n                [-18.5, 146.5],\n                {}\n            ).addTo(map_a52d74270167b75bb18b615b72498562);\n        \n    \n        var popup_0a6e48fa7b0fd88c173c44a025c5df80 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_7ab921bbeed285c4102340b0926ebf54 = $(`&lt;div id=&quot;html_7ab921bbeed285c4102340b0926ebf54&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;2022-01-30 17:02:42+00:00&lt;/div&gt;`)[0];\n                popup_0a6e48fa7b0fd88c173c44a025c5df80.setContent(html_7ab921bbeed285c4102340b0926ebf54);\n            \n        \n\n        marker_750d2c1d7743c06b2a9a96f4bcc72f2b.bindPopup(popup_0a6e48fa7b0fd88c173c44a025c5df80)\n        ;\n\n        \n    \n    \n            var marker_dfab33b759aa102ddd7da1b1d6dc0002 = L.marker(\n                [-24.5, 153.5],\n                {}\n            ).addTo(map_a52d74270167b75bb18b615b72498562);\n        \n    \n        var popup_98ddaaf585b7e570c0decb9138a5521d = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_cf6a2c703427cb670b892ccc4e2e2792 = $(`&lt;div id=&quot;html_cf6a2c703427cb670b892ccc4e2e2792&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;2022-02-03 21:37:56+00:00&lt;/div&gt;`)[0];\n                popup_98ddaaf585b7e570c0decb9138a5521d.setContent(html_cf6a2c703427cb670b892ccc4e2e2792);\n            \n        \n\n        marker_dfab33b759aa102ddd7da1b1d6dc0002.bindPopup(popup_98ddaaf585b7e570c0decb9138a5521d)\n        ;\n\n        \n    \n    \n            var marker_4756f5a6a8bf8e843d92d8aeb4c9ecd1 = L.marker(\n                [-15.5, 145.5],\n                {}\n            ).addTo(map_a52d74270167b75bb18b615b72498562);\n        \n    \n        var popup_7fde9d1dc6543e69ea97c9d275f78ad2 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_3980b58094023999920d4c21016b4442 = $(`&lt;div id=&quot;html_3980b58094023999920d4c21016b4442&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;2022-02-09 18:33:03+00:00&lt;/div&gt;`)[0];\n                popup_7fde9d1dc6543e69ea97c9d275f78ad2.setContent(html_3980b58094023999920d4c21016b4442);\n            \n        \n\n        marker_4756f5a6a8bf8e843d92d8aeb4c9ecd1.bindPopup(popup_7fde9d1dc6543e69ea97c9d275f78ad2)\n        ;\n\n        \n    \n    \n            var marker_536605c87a6bd24c498cf0ab6e0486c8 = L.marker(\n                [-16.5, 145.5],\n                {}\n            ).addTo(map_a52d74270167b75bb18b615b72498562);\n        \n    \n        var popup_3a2b1306b7a920844bace687c8b9284a = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_66c9a5e2e8ac2c10b286bb3b94628ce1 = $(`&lt;div id=&quot;html_66c9a5e2e8ac2c10b286bb3b94628ce1&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;2022-02-07 07:15:30+00:00&lt;/div&gt;`)[0];\n                popup_3a2b1306b7a920844bace687c8b9284a.setContent(html_66c9a5e2e8ac2c10b286bb3b94628ce1);\n            \n        \n\n        marker_536605c87a6bd24c498cf0ab6e0486c8.bindPopup(popup_3a2b1306b7a920844bace687c8b9284a)\n        ;\n\n        \n    \n    \n            var marker_d76ee6281df7f43fb08ba67128770b06 = L.marker(\n                [-13.5, 144.5],\n                {}\n            ).addTo(map_a52d74270167b75bb18b615b72498562);\n        \n    \n        var popup_34775c2266729c6af181959cb0db0b65 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_3f34588a7f2ad2b192c1cd7992c802ee = $(`&lt;div id=&quot;html_3f34588a7f2ad2b192c1cd7992c802ee&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;2022-03-25 07:10:49+00:00&lt;/div&gt;`)[0];\n                popup_34775c2266729c6af181959cb0db0b65.setContent(html_3f34588a7f2ad2b192c1cd7992c802ee);\n            \n        \n\n        marker_d76ee6281df7f43fb08ba67128770b06.bindPopup(popup_34775c2266729c6af181959cb0db0b65)\n        ;\n\n        \n    \n    \n            var marker_7989937ade30aff07359f5b0ae51c26f = L.marker(\n                [-21.5, 151.5],\n                {}\n            ).addTo(map_a52d74270167b75bb18b615b72498562);\n        \n    \n        var popup_1591006bb8cf101ea6cce153781d3cbb = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_1ec8f439fa1aaacc24a3679c44b160e1 = $(`&lt;div id=&quot;html_1ec8f439fa1aaacc24a3679c44b160e1&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;2022-01-13 06:28:09+00:00&lt;/div&gt;`)[0];\n                popup_1591006bb8cf101ea6cce153781d3cbb.setContent(html_1ec8f439fa1aaacc24a3679c44b160e1);\n            \n        \n\n        marker_7989937ade30aff07359f5b0ae51c26f.bindPopup(popup_1591006bb8cf101ea6cce153781d3cbb)\n        ;\n\n        \n    \n    \n            var marker_a158ada2efa125d08a490cb830347a04 = L.marker(\n                [-12.5, 143.5],\n                {}\n            ).addTo(map_a52d74270167b75bb18b615b72498562);\n        \n    \n        var popup_39c08f744b0b7933f496e9e3689c8f4c = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_15b4a560b0e7263eff12199df3d068d3 = $(`&lt;div id=&quot;html_15b4a560b0e7263eff12199df3d068d3&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;2022-04-01 18:41:42+00:00&lt;/div&gt;`)[0];\n                popup_39c08f744b0b7933f496e9e3689c8f4c.setContent(html_15b4a560b0e7263eff12199df3d068d3);\n            \n        \n\n        marker_a158ada2efa125d08a490cb830347a04.bindPopup(popup_39c08f744b0b7933f496e9e3689c8f4c)\n        ;\n\n        \n    \n    \n            var marker_e97d07e69aee4e6cb61a90d50a033fc1 = L.marker(\n                [-9.5, 143.5],\n                {}\n            ).addTo(map_a52d74270167b75bb18b615b72498562);\n        \n    \n        var popup_9a05c35cc8cc966e7766e9812d408478 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_452950bf6b28e02f347f72d42b849aec = $(`&lt;div id=&quot;html_452950bf6b28e02f347f72d42b849aec&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;2022-04-21 10:30:09+00:00&lt;/div&gt;`)[0];\n                popup_9a05c35cc8cc966e7766e9812d408478.setContent(html_452950bf6b28e02f347f72d42b849aec);\n            \n        \n\n        marker_e97d07e69aee4e6cb61a90d50a033fc1.bindPopup(popup_9a05c35cc8cc966e7766e9812d408478)\n        ;\n\n        \n    \n    \n            var marker_a104c690c5b46fe0b6e1877892360d1a = L.marker(\n                [-23.5, 152.5],\n                {}\n            ).addTo(map_a52d74270167b75bb18b615b72498562);\n        \n    \n        var popup_f4659e0d164de38c98f41883a360b414 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_b66cc0a2ba979732a6ae999c5f64221e = $(`&lt;div id=&quot;html_b66cc0a2ba979732a6ae999c5f64221e&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;2022-01-05 07:33:53+00:00&lt;/div&gt;`)[0];\n                popup_f4659e0d164de38c98f41883a360b414.setContent(html_b66cc0a2ba979732a6ae999c5f64221e);\n            \n        \n\n        marker_a104c690c5b46fe0b6e1877892360d1a.bindPopup(popup_f4659e0d164de38c98f41883a360b414)\n        ;\n\n        \n    \n    \n            var marker_56ca2938cd36f97b1b17fb73e70fce8b = L.marker(\n                [-16.5, 146.5],\n                {}\n            ).addTo(map_a52d74270167b75bb18b615b72498562);\n        \n    \n        var popup_0e664ce5b8513c16fa16e0c99f4bdd7e = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_8dfa3bec6dbdcaae4bea677d690f2cd0 = $(`&lt;div id=&quot;html_8dfa3bec6dbdcaae4bea677d690f2cd0&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;2022-02-06 18:25:38+00:00&lt;/div&gt;`)[0];\n                popup_0e664ce5b8513c16fa16e0c99f4bdd7e.setContent(html_8dfa3bec6dbdcaae4bea677d690f2cd0);\n            \n        \n\n        marker_56ca2938cd36f97b1b17fb73e70fce8b.bindPopup(popup_0e664ce5b8513c16fa16e0c99f4bdd7e)\n        ;\n\n        \n    \n    \n            var marker_397be8507503ae436929bc1d06aa6228 = L.marker(\n                [-23.5, 151.5],\n                {}\n            ).addTo(map_a52d74270167b75bb18b615b72498562);\n        \n    \n        var popup_8224363be1fb0419ec378370ecc28a8e = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_79838a2b1ac26603d068e14449b2ed83 = $(`&lt;div id=&quot;html_79838a2b1ac26603d068e14449b2ed83&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;2022-01-06 05:03:23+00:00&lt;/div&gt;`)[0];\n                popup_8224363be1fb0419ec378370ecc28a8e.setContent(html_79838a2b1ac26603d068e14449b2ed83);\n            \n        \n\n        marker_397be8507503ae436929bc1d06aa6228.bindPopup(popup_8224363be1fb0419ec378370ecc28a8e)\n        ;\n\n        \n    \n    \n            var marker_bbaf3a6ec4cb8e1bc72e8ea974b1b725 = L.marker(\n                [-17.5, 146.5],\n                {}\n            ).addTo(map_a52d74270167b75bb18b615b72498562);\n        \n    \n        var popup_b3903aa72c4822e991dad0c4a5780b22 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n\n        \n            \n                var html_c1f7cefc2f72ce8abb7a4cf118f708e8 = $(`&lt;div id=&quot;html_c1f7cefc2f72ce8abb7a4cf118f708e8&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;2022-02-02 09:14:56+00:00&lt;/div&gt;`)[0];\n                popup_b3903aa72c4822e991dad0c4a5780b22.setContent(html_c1f7cefc2f72ce8abb7a4cf118f708e8);\n            \n        \n\n        marker_bbaf3a6ec4cb8e1bc72e8ea974b1b725.bindPopup(popup_b3903aa72c4822e991dad0c4a5780b22)\n        ;\n\n        \n    \n&lt;/script&gt;\n&lt;/html&gt;\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>\n```\n\n\nLoggerhead Sea Turtle satellite tracking records (December 2021 - April 2022)\n:::\n:::\n\n\n\n## Extracting data from the server\n\nIn the preceeding tutorial [Accessing eReefs data from the AIMS server](../basic-server-access/basic_server_access_python.qmd) we introduced the process of extracting eReefs data from the [AIMS server](http://thredds.ereefs.aims.gov.au/thredds/catalog.html). We will now extend this methodology to extract data for a set of points and dates. \n\nIn @tbl-detections below we see the set of coordinates and dates for which we wish to get the eReefs data. \n\n:::{.callout-note appearance=\"simple\"}\nThe AIMS eReefs server only contains aggregated data. That is daily, monthly, or yearly aggregations of the hourly eReefs raw model output. We will use the daily aggregated data for this tutorial, however the same techniques could be applied to access the raw model data from the [National Computational Infrastructure (NCI) server](https://dapds00.nci.org.au/thredds/catalogs/fx3/catalog.html).\n:::\n\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"true\" code-summary=\"Show code to produce table\"}\n# Create table of tracking detections\ntbl = data.sort_values('date_time') # sort by date_time\ntbl = tbl[['date', 'time', 'longitude', 'latitude']] # select variables\n\n# Output table in html format (hide row nums; format coordinates to their precision of 1 decimal place)\ntbl = tbl.style.hide(axis = 'index').format(precision=1)\n```\n:::\n\n::: {#tbl-detections .cell tbl-cap='Loggerhead Sea Turtle detections (Strydom, 2022)' class='scroll_box_y'}\n::: {.cell-output-display}\n```{=html}\n<style type=\"text/css\">\n</style>\n<table id=\"T_08260\">\n  <thead>\n    <tr>\n      <th id=\"T_08260_level0_col0\" class=\"col_heading level0 col0\" >date</th>\n      <th id=\"T_08260_level0_col1\" class=\"col_heading level0 col1\" >time</th>\n      <th id=\"T_08260_level0_col2\" class=\"col_heading level0 col2\" >longitude</th>\n      <th id=\"T_08260_level0_col3\" class=\"col_heading level0 col3\" >latitude</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_08260_row0_col0\" class=\"data row0 col0\" >2021-12-21</td>\n      <td id=\"T_08260_row0_col1\" class=\"data row0 col1\" >17:57</td>\n      <td id=\"T_08260_row0_col2\" class=\"data row0 col2\" >152.5</td>\n      <td id=\"T_08260_row0_col3\" class=\"data row0 col3\" >-24.5</td>\n    </tr>\n    <tr>\n      <td id=\"T_08260_row1_col0\" class=\"data row1 col0\" >2022-01-02</td>\n      <td id=\"T_08260_row1_col1\" class=\"data row1 col1\" >21:49</td>\n      <td id=\"T_08260_row1_col2\" class=\"data row1 col2\" >153.5</td>\n      <td id=\"T_08260_row1_col3\" class=\"data row1 col3\" >-25.5</td>\n    </tr>\n    <tr>\n      <td id=\"T_08260_row2_col0\" class=\"data row2 col0\" >2022-01-05</td>\n      <td id=\"T_08260_row2_col1\" class=\"data row2 col1\" >07:33</td>\n      <td id=\"T_08260_row2_col2\" class=\"data row2 col2\" >152.5</td>\n      <td id=\"T_08260_row2_col3\" class=\"data row2 col3\" >-23.5</td>\n    </tr>\n    <tr>\n      <td id=\"T_08260_row3_col0\" class=\"data row3 col0\" >2022-01-06</td>\n      <td id=\"T_08260_row3_col1\" class=\"data row3 col1\" >05:03</td>\n      <td id=\"T_08260_row3_col2\" class=\"data row3 col2\" >151.5</td>\n      <td id=\"T_08260_row3_col3\" class=\"data row3 col3\" >-23.5</td>\n    </tr>\n    <tr>\n      <td id=\"T_08260_row4_col0\" class=\"data row4 col0\" >2022-01-09</td>\n      <td id=\"T_08260_row4_col1\" class=\"data row4 col1\" >20:25</td>\n      <td id=\"T_08260_row4_col2\" class=\"data row4 col2\" >151.5</td>\n      <td id=\"T_08260_row4_col3\" class=\"data row4 col3\" >-22.5</td>\n    </tr>\n    <tr>\n      <td id=\"T_08260_row5_col0\" class=\"data row5 col0\" >2022-01-13</td>\n      <td id=\"T_08260_row5_col1\" class=\"data row5 col1\" >06:28</td>\n      <td id=\"T_08260_row5_col2\" class=\"data row5 col2\" >151.5</td>\n      <td id=\"T_08260_row5_col3\" class=\"data row5 col3\" >-21.5</td>\n    </tr>\n    <tr>\n      <td id=\"T_08260_row6_col0\" class=\"data row6 col0\" >2022-01-14</td>\n      <td id=\"T_08260_row6_col1\" class=\"data row6 col1\" >18:26</td>\n      <td id=\"T_08260_row6_col2\" class=\"data row6 col2\" >150.5</td>\n      <td id=\"T_08260_row6_col3\" class=\"data row6 col3\" >-21.5</td>\n    </tr>\n    <tr>\n      <td id=\"T_08260_row7_col0\" class=\"data row7 col0\" >2022-01-17</td>\n      <td id=\"T_08260_row7_col1\" class=\"data row7 col1\" >17:06</td>\n      <td id=\"T_08260_row7_col2\" class=\"data row7 col2\" >150.5</td>\n      <td id=\"T_08260_row7_col3\" class=\"data row7 col3\" >-20.5</td>\n    </tr>\n    <tr>\n      <td id=\"T_08260_row8_col0\" class=\"data row8 col0\" >2022-01-19</td>\n      <td id=\"T_08260_row8_col1\" class=\"data row8 col1\" >17:44</td>\n      <td id=\"T_08260_row8_col2\" class=\"data row8 col2\" >149.5</td>\n      <td id=\"T_08260_row8_col3\" class=\"data row8 col3\" >-20.5</td>\n    </tr>\n    <tr>\n      <td id=\"T_08260_row9_col0\" class=\"data row9 col0\" >2022-01-21</td>\n      <td id=\"T_08260_row9_col1\" class=\"data row9 col1\" >07:22</td>\n      <td id=\"T_08260_row9_col2\" class=\"data row9 col2\" >149.5</td>\n      <td id=\"T_08260_row9_col3\" class=\"data row9 col3\" >-19.5</td>\n    </tr>\n    <tr>\n      <td id=\"T_08260_row10_col0\" class=\"data row10 col0\" >2022-01-23</td>\n      <td id=\"T_08260_row10_col1\" class=\"data row10 col1\" >07:02</td>\n      <td id=\"T_08260_row10_col2\" class=\"data row10 col2\" >148.5</td>\n      <td id=\"T_08260_row10_col3\" class=\"data row10 col3\" >-19.5</td>\n    </tr>\n    <tr>\n      <td id=\"T_08260_row11_col0\" class=\"data row11 col0\" >2022-01-27</td>\n      <td id=\"T_08260_row11_col1\" class=\"data row11 col1\" >17:00</td>\n      <td id=\"T_08260_row11_col2\" class=\"data row11 col2\" >147.5</td>\n      <td id=\"T_08260_row11_col3\" class=\"data row11 col3\" >-18.5</td>\n    </tr>\n    <tr>\n      <td id=\"T_08260_row12_col0\" class=\"data row12 col0\" >2022-01-30</td>\n      <td id=\"T_08260_row12_col1\" class=\"data row12 col1\" >17:02</td>\n      <td id=\"T_08260_row12_col2\" class=\"data row12 col2\" >146.5</td>\n      <td id=\"T_08260_row12_col3\" class=\"data row12 col3\" >-18.5</td>\n    </tr>\n    <tr>\n      <td id=\"T_08260_row13_col0\" class=\"data row13 col0\" >2022-02-02</td>\n      <td id=\"T_08260_row13_col1\" class=\"data row13 col1\" >09:14</td>\n      <td id=\"T_08260_row13_col2\" class=\"data row13 col2\" >146.5</td>\n      <td id=\"T_08260_row13_col3\" class=\"data row13 col3\" >-17.5</td>\n    </tr>\n    <tr>\n      <td id=\"T_08260_row14_col0\" class=\"data row14 col0\" >2022-02-03</td>\n      <td id=\"T_08260_row14_col1\" class=\"data row14 col1\" >21:37</td>\n      <td id=\"T_08260_row14_col2\" class=\"data row14 col2\" >153.5</td>\n      <td id=\"T_08260_row14_col3\" class=\"data row14 col3\" >-24.5</td>\n    </tr>\n    <tr>\n      <td id=\"T_08260_row15_col0\" class=\"data row15 col0\" >2022-02-06</td>\n      <td id=\"T_08260_row15_col1\" class=\"data row15 col1\" >18:25</td>\n      <td id=\"T_08260_row15_col2\" class=\"data row15 col2\" >146.5</td>\n      <td id=\"T_08260_row15_col3\" class=\"data row15 col3\" >-16.5</td>\n    </tr>\n    <tr>\n      <td id=\"T_08260_row16_col0\" class=\"data row16 col0\" >2022-02-07</td>\n      <td id=\"T_08260_row16_col1\" class=\"data row16 col1\" >07:15</td>\n      <td id=\"T_08260_row16_col2\" class=\"data row16 col2\" >145.5</td>\n      <td id=\"T_08260_row16_col3\" class=\"data row16 col3\" >-16.5</td>\n    </tr>\n    <tr>\n      <td id=\"T_08260_row17_col0\" class=\"data row17 col0\" >2022-02-09</td>\n      <td id=\"T_08260_row17_col1\" class=\"data row17 col1\" >18:33</td>\n      <td id=\"T_08260_row17_col2\" class=\"data row17 col2\" >145.5</td>\n      <td id=\"T_08260_row17_col3\" class=\"data row17 col3\" >-15.5</td>\n    </tr>\n    <tr>\n      <td id=\"T_08260_row18_col0\" class=\"data row18 col0\" >2022-02-12</td>\n      <td id=\"T_08260_row18_col1\" class=\"data row18 col1\" >08:59</td>\n      <td id=\"T_08260_row18_col2\" class=\"data row18 col2\" >153.5</td>\n      <td id=\"T_08260_row18_col3\" class=\"data row18 col3\" >-26.5</td>\n    </tr>\n    <tr>\n      <td id=\"T_08260_row19_col0\" class=\"data row19 col0\" >2022-02-12</td>\n      <td id=\"T_08260_row19_col1\" class=\"data row19 col1\" >10:34</td>\n      <td id=\"T_08260_row19_col2\" class=\"data row19 col2\" >145.5</td>\n      <td id=\"T_08260_row19_col3\" class=\"data row19 col3\" >-14.5</td>\n    </tr>\n    <tr>\n      <td id=\"T_08260_row20_col0\" class=\"data row20 col0\" >2022-03-25</td>\n      <td id=\"T_08260_row20_col1\" class=\"data row20 col1\" >07:10</td>\n      <td id=\"T_08260_row20_col2\" class=\"data row20 col2\" >144.5</td>\n      <td id=\"T_08260_row20_col3\" class=\"data row20 col3\" >-13.5</td>\n    </tr>\n    <tr>\n      <td id=\"T_08260_row21_col0\" class=\"data row21 col0\" >2022-04-01</td>\n      <td id=\"T_08260_row21_col1\" class=\"data row21 col1\" >18:41</td>\n      <td id=\"T_08260_row21_col2\" class=\"data row21 col2\" >143.5</td>\n      <td id=\"T_08260_row21_col3\" class=\"data row21 col3\" >-12.5</td>\n    </tr>\n    <tr>\n      <td id=\"T_08260_row22_col0\" class=\"data row22 col0\" >2022-04-09</td>\n      <td id=\"T_08260_row22_col1\" class=\"data row22 col1\" >22:00</td>\n      <td id=\"T_08260_row22_col2\" class=\"data row22 col2\" >143.5</td>\n      <td id=\"T_08260_row22_col3\" class=\"data row22 col3\" >-11.5</td>\n    </tr>\n    <tr>\n      <td id=\"T_08260_row23_col0\" class=\"data row23 col0\" >2022-04-14</td>\n      <td id=\"T_08260_row23_col1\" class=\"data row23 col1\" >06:31</td>\n      <td id=\"T_08260_row23_col2\" class=\"data row23 col2\" >143.5</td>\n      <td id=\"T_08260_row23_col3\" class=\"data row23 col3\" >-10.5</td>\n    </tr>\n    <tr>\n      <td id=\"T_08260_row24_col0\" class=\"data row24 col0\" >2022-04-21</td>\n      <td id=\"T_08260_row24_col1\" class=\"data row24 col1\" >10:30</td>\n      <td id=\"T_08260_row24_col2\" class=\"data row24 col2\" >143.5</td>\n      <td id=\"T_08260_row24_col3\" class=\"data row24 col3\" >-9.5</td>\n    </tr>\n  </tbody>\n</table>\n\n```\n:::\n:::\n\n\n<br>\n\nWe will take advantage of the consistent file naming on the server to extract the data of interest programatically. We will first need to copy the OPeNDAP data link for one of the files within the correct model and aggregation folders and then replace the date. \n\nSelecting a random date within the daily aggregated data (`daily-daily`; one data file per day) for the 1km hydro model (`gbr1_2.0`), we see the files have the naming format:\n\n`https://thredds.ereefs.aims.gov.au/thredds/dodsC/s3://aims-ereefs-public-prod/derived/ncaggregate/ereefs/gbr1_2.0/daily-daily/EREEFS_AIMS-CSIRO_gbr1_2.0_hydro_daily-daily-`[YYYY-MM-DD]{style=\"color: red\"}`.nc`\n\nWe will now write a script which extracts the data for the dates and coordinates in @tbl-detections. For each unique date we will open the corresponding file on the server and extract the daily mean temperature, salinity, northward and southward current velocities for each set of coordinates corresponding to the date.\n\n\n::: {.cell}\n\n```{.python .cell-code .code-overflow-wrap}\n# GET DATA FOR EACH DATE AND COORDINATE (LAT LON) PAIR\nt_start = dt.datetime.now() # to track run time of extraction\n\n## 1. Setup variables for data extraction\n# Server file name = <file_prefix><date (yyyy-mm-dd)><file_suffix>\nfile_prefix = \"https://thredds.ereefs.aims.gov.au/thredds/dodsC/s3://aims-ereefs-public-prod/derived/ncaggregate/ereefs/gbr1_2.0/daily-daily/EREEFS_AIMS-CSIRO_gbr1_2.0_hydro_daily-daily-\"\nfile_suffix = \".nc\"\n\n# Table of dates and coordinates for which to extract data (dates as character string)\ndetections = data[['date', 'longitude', 'latitude']].drop_duplicates()\n\nextracted_data = pd.DataFrame() # to save the extracted data\ndates = detections['date'].unique() # unique dates for which to open server files\n\n## 2. For each date of interest, open a connection to the corresponding data file on the server\nfor i in range(len(dates)):\n  date_i = dates[i]\n  \n  # Open file\n  file_name_i = file_prefix + dates[i] + file_suffix\n  server_file_i = Dataset(file_name_i)\n\n  # Coordinates for which to extract data for the current date\n  coordinates_i = detections.query(\"date == @date_i\")\n\n  # Get all coordinates in the open file (each representing the center-point of the corresponding grid cell)\n  server_lons_i = server_file_i.variables['longitude'][:]\n  server_lats_i = server_file_i.variables['latitude'][:]\n\n  ## 3. For each coordinate (lon, lat) for the current date, get the data for the closest grid cell (1km^2) from the open server file\n  for row_j in coordinates_i.itertuples():\n    \n    # Current coordinate of interest\n    lon_j = row_j.longitude\n    lat_j = row_j.latitude\n        \n    # Find the index of the grid cell containing our coordinate of interest (i.e. the center-point closest to our point of interest)\n    lon_index_j = np.argmin(np.abs(server_lons_i - lon_j))\n    lat_index_j = np.argmin(np.abs(server_lats_i - lat_j))\n    # Note: This will return the closest grid cell, even for coordinates outside of the eReefs model boundary\n\n    # Setup the dimension indices for which to extract data (needs to be a tuple; recall that python starts counting at 0 🤦)\n    dim_ind = tuple([0, 15, lat_index_j, lon_index_j])\n    ######################################## \n    # Recall the order of the dimensions (time, k, latitude, longitude) from the previous tutorial. Therefore we want [time = 1 (as we're using the daily files this is the only option), k = 15 corresponding to a depth of 0.5m, lat_index_j, lon_index_j]. If you are still confused, go back to the previous tutorial or have a look at the structure of one of the server files by uncommenting the following 5 lines of code:\n    # not_yet_run = True  # used so the following lines are only run once\n    # if not_yet_run: \n    #   print(server_file_i.dimensions)\n    #   print(server_file_i.variables)\n    #   not_yet_run = False\n    ########################################\n\n    # Get the data for the grid cell containing our point of interest\n    temp_j = server_file_i.variables['temp'][dim_ind]\n    salt_j = server_file_i.variables['salt'][dim_ind]\n    u_j = server_file_i.variables['u'][dim_ind]\n    v_j = server_file_i.variables['v'][dim_ind]\n\n    extracted_data_j = pd.DataFrame({\n      'date': [date_i],\n      'lon': [lon_j],\n      'lat': [lat_j],\n      'temp': [temp_j],\n      'salt': [salt_j],\n      'u': [u_j],\n      'v': [v_j]\n    })\n\n    ## 4. Save data in memory and repeat for next date-coordinate pair\n    extracted_data = pd.concat([extracted_data, extracted_data_j], ignore_index = True)\n  \n\n  # Close connection to open server file and move to the next date\n  server_file_i.close()\n\n\n# Calculate the run time of the extraction\nt_stop = dt.datetime.now()\nextract_time = t_stop - t_start\nextract_mins = int(extract_time.total_seconds()/60)\nextract_secs = int(extract_time.total_seconds() % 60)\nprint(\"Data extracted for\", len(detections), \"points from\", len(dates), \"files. Extraction time:\", extract_mins, \"min\", extract_secs, \"sec.\")\n```\n:::\n\n\n:::{.callout-caution appearance=\"simple\"}\nIn the code above we match the closest eReefs model grid cell to each point in our list of coordinates (i.e. for each tracking detection). This will therefore match grid cells to all the coordinates, even if they are not within the eReefs model boundary. This behaviour may be useful when we have points right along the coastline as the eReefs models have small gaps at many points along the coast (see image below). However, in other cases this behaviour may not be desirable. For example, if we had points down near Sydney they would be matched to the closest eReefs grid cells (somewhere up near Brisbane) and the extracted data would be erroneous.\n\n[![](images/ereefs_model_boundary_and_grid_cells.jpeg)](images/ereefs_model_boundary_and_grid_cells.jpeg)\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nOur extracted data is shown below in @tbl-extracted-data. To get this data we openned `r length(dates)` files on the server (corresponding to unique dates in @tbl-detections) and extracted data for `r nrow(detections)` unique date-coordinate pairs. On our machine this took `r paste(round(as.numeric(extract_time), 1), units(extract_time))` to run.\n```\n:::\n\n::: {#tbl-extracted-data .cell tbl-cap='Extracted daily mean temperature, salinity, and east- and northward current velocities (u, v respectively) for Loggerhead Sea Turtle detections (Strydom, 2022)'}\n\n```{.r .cell-code}\n# Print the extracted data\nextracted_data |> kable() |> kable_styling() |> scroll_box(height = \"300px\", fixed_thead = TRUE)\n```\n:::\n\n\n\n## Matching extracted data to tracking data\n\nWe will match up the eReefs data with our tracking detections by combining the two datasets based on common date, longitude and latitude values.\n\n\n::: {#tbl-combined-data .cell tbl-cap='Loggerhead Sea Turtle tracking detections (Strydom, 2022) and corresponding eReefs daily mean temperature, salinity, east- and northward current velocities (u, v respectively).'}\n\n```{.r .cell-code}\n# Ensure common variables date, lon and lat between the two datasets\nextracted_data <- extracted_data |> \n  rename(longitude = lon, latitude = lat)\nloggerhead_data <- loggerhead_data |> \n  mutate(date = as_date(date_time))\n\n# Merge the two datasets based on common date, lon and lat values\ncombined_data <- merge(\n  loggerhead_data, extracted_data, \n  by = c(\"date\", \"longitude\", \"latitude\")\n) |> select(-date)\n\n# Print the combined data\ncombined_data |> kable() |> kable_styling() |>  scroll_box(height = \"300px\", fixed_thead = TRUE)\n```\n:::\n\n\nHooray! We now have our combined dataset of the Loggerhead Sea Turtle tracking detections and the corresponding eReefs daily aggregated data (@tbl-combined-data).\n\n\n\n\n<br><br><br><br><br><br><br><br><br><br><br>Strydom A. 2022. Wreck Rock Turtle Care - satellite tracking. Data downloaded from [OBIS-SEAMAP](http://seamap.env.duke.edu/dataset/2178); originated from [Satellite Tracking and Analysis Tool (STAT)](http://www.seaturtle.org/tracking/index.shtml?project_id=1381). [DOI: 10.15468/k4s6ap](https://doi.org/10.15468/k4s6ap) accessed via [GBIF.org](https://www.gbif.org/) on 2023-02-17.",
    "supporting": [
      "programmatic_server_access_python_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}