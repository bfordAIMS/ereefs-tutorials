{
  "hash": "8d985ef4cae1469c59c907a6f4b43dfd",
  "result": {
    "markdown": "---\ntitle: \"Accessing eReefs data from the THREDDS server {{< fa brands r-project >}}\"\n---\n\n\n\nIn this tutorial we will look at how to access eReefs data directly from the [AIMS THREDDS server](http://thredds.ereefs.aims.gov.au/thredds/catalog.html) in R. This server hosts both ?raw and aggregated? eReefs model data in netCDF file format and offers access to the data files via OPeNDAP, HTTP Server, and Web Map Service (WMS). While we could download the data files manually via the HTTPServer link, this becomes cumbersome when downloading multiple files, given their large size. Thankfully, OPeNDAP provides a way to access the data files over the internet and extract only the data we want. \n\nFor example, say we want the daily mean surface temperature at a single location for the last 30 days. If we were to download the 30 individual daily aggregated netCDF files, with each file ~ 350 Mb, this would require us to download over 10 Gb of data just to get 300 numbers. The vast majority of this data would be irrelevant to our needs as the netCDF files contain data for a range of variables, at a range of depths, for many, many locations. However, with OPeNDAP, we can extract the daily mean values directly from the server without downloading any superfluous data.\n\n\n# Navigating the eReefs server\n\n*ADD: Info about the folder and file naming on the AIMS THREDDS Server.*\n\n\n# R packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(RNetCDF) # package for netcdf manipulation\nlibrary(raster) # package for raster manipulation\nlibrary(ggplot2) # package for plotting\nlibrary(rgdal) # package for geospatial analysis\n```\n:::\n\n\nWhile the `ncdf4` package is commonly used to work with NetCDF files in R, it does not offer compatibility with OPeNDAP for Windows (only Mac and Linux). For this reason we will use the `RNetCDF` package which offers similar functionality and Windows compatibility with OPeNDAP. Note that if you are using Mac or Linux and wish to use `ncdf4`, the functions used herein have obvious analogues (e.g. `ncdf4::nc_open()` vs. `RNetCDF::open.nc()`).\n\n*ADD:*\n\n`raster` does what?...\n\n`ggplot2` is used to make more advanced plots than the `base::plot` function.\n\n`rgdal` does what? ...\n\n\n\n\n# Basic example\n\nIn this example we will extract the daily mean water temperature for the 10th of December 2022 at 1.5 m depth  across the entire scope of the eReefs model. We will then produce a very basic plot of the data.\n\n### Connect to a file on the server\n\nFirst we need to find the right NetCDF file on the server. The available eReefs data NetCDF files are listed in the [AIMS THREDDS Server catalogue](http://thredds.ereefs.aims.gov.au/thredds/catalog.html). We will navigate to the eReefs 4 km Hydrodynamic Model daily aggregated data for the month of December 2022 and copy the OPeNDAP data URL.\n\n![](images/server_navigation.gif)\n\n\n::: {.cell}\n\n```{.r .cell-code .code-overflow-wrap}\ninput_file <- \"https://thredds.ereefs.aims.gov.au/thredds/dodsC/s3://aims-ereefs-public-prod/derived/ncaggregate/ereefs/gbr4_v2/daily-monthly/EREEFS_AIMS-CSIRO_gbr4_v2_hydro_daily-monthly-2022-12.nc\"\n```\n:::\n\n\nWe can then open a connection to this file using the `RNetCDF::open.nc` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndailyAgg_dec22 <- open.nc(input_file)\n```\n:::\n\n\n::: {.callout-note appearance=\"simple\"}\n## Downloading NetCDF files\nIf you wish to download NetCDF files from the server you can click the HTTPServer link instead of OPeNDAP. It is then loaded into R by specifying the path: `open.nc(\"<path to downloaded file>\")`.\n:::\n\n### Print a summary of the file\n\nIf we do not know what variables or dimensions are available in the file we have connected to, we can print a summary.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint.nc(dailyAgg_dec22)\n```\n:::\n\n\n<details><summary>Show output</summary>\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nnetcdf classic {\ndimensions:\n\ttime = UNLIMITED ; // (31 currently)\n\tk = 17 ;\n\tlatitude = 723 ;\n\tlongitude = 491 ;\nvariables:\n\tNC_FLOAT mean_cur(longitude, latitude, k, time) ;\n\t\tNC_CHAR mean_cur:puv__parameter = \"http://vocab.nerc.ac.uk/collection/P01/current/LCEWMP01/\" ;\n\t\tNC_CHAR mean_cur:coordinates = \"time zc latitude longitude\" ;\n\t\tNC_CHAR mean_cur:units = \"ms-1\" ;\n\t\tNC_CHAR mean_cur:short_name = \"mean_cur\" ;\n\t\tNC_CHAR mean_cur:aggregation = \"mean_speed\" ;\n\t\tNC_CHAR mean_cur:standard_name = \"mean_current_speed\" ;\n\t\tNC_CHAR mean_cur:long_name = \"mean_current_speed\" ;\n\t\tNC_INT mean_cur:_ChunkSizes = 1, 1, 133, 491 ;\n\tNC_FLOAT salt(longitude, latitude, k, time) ;\n\t\tNC_CHAR salt:qudt__unit = \"http://qudt.org/vocab/unit/PSU\" ;\n\t\tNC_CHAR salt:puv__parameter = \"http://vocab.nerc.ac.uk/collection/P01/current/PSLTMP01/\" ;\n\t\tNC_CHAR salt:coordinates = \"time zc latitude longitude\" ;\n\t\tNC_CHAR salt:short_name = \"salt\" ;\n\t\tNC_CHAR salt:aggregation = \"Daily\" ;\n\t\tNC_CHAR salt:units = \"PSU\" ;\n\t\tNC_CHAR salt:long_name = \"Salinity\" ;\n\t\tNC_INT salt:_ChunkSizes = 1, 1, 133, 491 ;\n\tNC_FLOAT temp(longitude, latitude, k, time) ;\n\t\tNC_CHAR temp:puv__parameter = \"https://vocab.nerc.ac.uk/collection/P01/current/TEMPMP01/\" ;\n\t\tNC_CHAR temp:coordinates = \"time zc latitude longitude\" ;\n\t\tNC_CHAR temp:short_name = \"temp\" ;\n\t\tNC_CHAR temp:aggregation = \"Daily\" ;\n\t\tNC_CHAR temp:units = \"degrees C\" ;\n\t\tNC_CHAR temp:long_name = \"Temperature\" ;\n\t\tNC_INT temp:_ChunkSizes = 1, 1, 133, 491 ;\n\tNC_FLOAT u(longitude, latitude, k, time) ;\n\t\tNC_CHAR u:vector_components = \"u v\" ;\n\t\tNC_CHAR u:puv__parameter = \"http://vocab.nerc.ac.uk/collection/P01/current/LCEWMP01/\" ;\n\t\tNC_CHAR u:coordinates = \"time zc latitude longitude\" ;\n\t\tNC_CHAR u:short_name = \"u\" ;\n\t\tNC_CHAR u:standard_name = \"eastward_sea_water_velocity\" ;\n\t\tNC_CHAR u:vector_name = \"Currents\" ;\n\t\tNC_CHAR u:aggregation = \"Daily\" ;\n\t\tNC_CHAR u:units = \"ms-1\" ;\n\t\tNC_CHAR u:long_name = \"Eastward current\" ;\n\t\tNC_INT u:_ChunkSizes = 1, 1, 133, 491 ;\n\tNC_FLOAT v(longitude, latitude, k, time) ;\n\t\tNC_CHAR v:vector_components = \"u v\" ;\n\t\tNC_CHAR v:puv__parameter = \"http://vocab.nerc.ac.uk/collection/P01/current/LCNSMP01/\" ;\n\t\tNC_CHAR v:coordinates = \"time zc latitude longitude\" ;\n\t\tNC_CHAR v:short_name = \"v\" ;\n\t\tNC_CHAR v:standard_name = \"northward_sea_water_velocity\" ;\n\t\tNC_CHAR v:vector_name = \"Currents\" ;\n\t\tNC_CHAR v:aggregation = \"Daily\" ;\n\t\tNC_CHAR v:units = \"ms-1\" ;\n\t\tNC_CHAR v:long_name = \"Northward current\" ;\n\t\tNC_INT v:_ChunkSizes = 1, 1, 133, 491 ;\n\tNC_DOUBLE zc(k) ;\n\t\tNC_CHAR zc:units = \"m\" ;\n\t\tNC_CHAR zc:positive = \"up\" ;\n\t\tNC_CHAR zc:long_name = \"Z coordinate\" ;\n\t\tNC_CHAR zc:axis = \"Z\" ;\n\t\tNC_CHAR zc:coordinate_type = \"Z\" ;\n\t\tNC_CHAR zc:_CoordinateAxisType = \"Height\" ;\n\t\tNC_CHAR zc:_CoordinateZisPositive = \"up\" ;\n\tNC_DOUBLE time(time) ;\n\t\tNC_CHAR time:units = \"days since 1990-01-01 00:00:00 +10\" ;\n\t\tNC_CHAR time:long_name = \"Time\" ;\n\t\tNC_CHAR time:standard_name = \"time\" ;\n\t\tNC_CHAR time:coordinate_type = \"time\" ;\n\t\tNC_CHAR time:puv__uom = \"http://vocab.nerc.ac.uk/collection/P06/current/UTAA/\" ;\n\t\tNC_CHAR time:calendar = \"gregorian\" ;\n\t\tNC_CHAR time:_CoordinateAxisType = \"Time\" ;\n\t\tNC_INT time:_ChunkSizes = 1024 ;\n\tNC_DOUBLE latitude(latitude) ;\n\t\tNC_CHAR latitude:units = \"degrees_north\" ;\n\t\tNC_CHAR latitude:long_name = \"Latitude\" ;\n\t\tNC_CHAR latitude:standard_name = \"latitude\" ;\n\t\tNC_CHAR latitude:coordinate_type = \"latitude\" ;\n\t\tNC_CHAR latitude:projection = \"geographic\" ;\n\t\tNC_CHAR latitude:puv__ofProperty = \"http://vocab.nerc.ac.uk/collection/S06/current/S0600045/\" ;\n\t\tNC_CHAR latitude:puv__uom = \"http://vocab.nerc.ac.uk/collection/P06/current/DEGN/\" ;\n\t\tNC_CHAR latitude:_CoordinateAxisType = \"Lat\" ;\n\tNC_DOUBLE longitude(longitude) ;\n\t\tNC_CHAR longitude:puv__uom = \"http://vocab.nerc.ac.uk/collection/P06/current/DEGE/\" ;\n\t\tNC_CHAR longitude:units = \"degrees_east\" ;\n\t\tNC_CHAR longitude:long_name = \"Longitude\" ;\n\t\tNC_CHAR longitude:standard_name = \"longitude\" ;\n\t\tNC_CHAR longitude:coordinate_type = \"longitude\" ;\n\t\tNC_CHAR longitude:projection = \"geographic\" ;\n\t\tNC_CHAR longitude:_CoordinateAxisType = \"Lon\" ;\n\tNC_FLOAT mean_wspeed(longitude, latitude, time) ;\n\t\tNC_CHAR mean_wspeed:puv__parameter = \"http://vocab.nerc.ac.uk/collection/P01/current/ESEWMPXX/\" ;\n\t\tNC_CHAR mean_wspeed:coordinates = \"time latitude longitude\" ;\n\t\tNC_CHAR mean_wspeed:units = \"ms-1\" ;\n\t\tNC_CHAR mean_wspeed:short_name = \"mean_wspeed\" ;\n\t\tNC_CHAR mean_wspeed:aggregation = \"mean_speed\" ;\n\t\tNC_CHAR mean_wspeed:standard_name = \"mean_wind_speed\" ;\n\t\tNC_CHAR mean_wspeed:long_name = \"mean_wind_speed\" ;\n\t\tNC_INT mean_wspeed:_ChunkSizes = 1, 133, 491 ;\n\tNC_FLOAT eta(longitude, latitude, time) ;\n\t\tNC_CHAR eta:puv__parameter = \"https://vocab.nerc.ac.uk/collection/P01/current/ASLVMP01/\" ;\n\t\tNC_CHAR eta:coordinates = \"time latitude longitude\" ;\n\t\tNC_CHAR eta:short_name = \"eta\" ;\n\t\tNC_CHAR eta:standard_name = \"sea_surface_height_above_geoid\" ;\n\t\tNC_CHAR eta:aggregation = \"Daily\" ;\n\t\tNC_CHAR eta:units = \"metre\" ;\n\t\tNC_CHAR eta:positive = \"up\" ;\n\t\tNC_CHAR eta:long_name = \"Surface elevation\" ;\n\t\tNC_INT eta:_ChunkSizes = 1, 133, 491 ;\n\tNC_FLOAT wspeed_u(longitude, latitude, time) ;\n\t\tNC_CHAR wspeed_u:puv__parameter = \"http://vocab.nerc.ac.uk/collection/P01/current/ESEWMPXX/\" ;\n\t\tNC_CHAR wspeed_u:coordinates = \"time latitude longitude\" ;\n\t\tNC_CHAR wspeed_u:short_name = \"wspeed_u\" ;\n\t\tNC_CHAR wspeed_u:aggregation = \"Daily\" ;\n\t\tNC_CHAR wspeed_u:units = \"ms-1\" ;\n\t\tNC_CHAR wspeed_u:long_name = \"eastward_wind\" ;\n\t\tNC_INT wspeed_u:_ChunkSizes = 1, 133, 491 ;\n\tNC_FLOAT wspeed_v(longitude, latitude, time) ;\n\t\tNC_CHAR wspeed_v:puv__parameter = \"http://vocab.nerc.ac.uk/collection/P01/current/ESNSMPXX/\" ;\n\t\tNC_CHAR wspeed_v:coordinates = \"time latitude longitude\" ;\n\t\tNC_CHAR wspeed_v:short_name = \"wspeed_v\" ;\n\t\tNC_CHAR wspeed_v:aggregation = \"Daily\" ;\n\t\tNC_CHAR wspeed_v:units = \"ms-1\" ;\n\t\tNC_CHAR wspeed_v:long_name = \"northward_wind\" ;\n\t\tNC_INT wspeed_v:_ChunkSizes = 1, 133, 491 ;\n\n// global attributes:\n\t\tNC_CHAR :Conventions = \"CF-1.0\" ;\n\t\tNC_CHAR :Parameter_File_Revision = \"$Revision: 1753 $\" ;\n\t\tNC_CHAR :Run_ID = \"2.1\" ;\n\t\tNC_CHAR :Run_code = \"GBR4 Hydro|G0.00|H2.10|S0.00|B0.00\" ;\n\t\tNC_CHAR :_CoordSysBuilder = \"ucar.nc2.dataset.conv.CF1Convention\" ;\n\t\tNC_CHAR :aims_ncaggregate_buildDate = \"2023-01-25T03:48:20+10:00\" ;\n\t\tNC_CHAR :aims_ncaggregate_datasetId = \"products__ncaggregate__ereefs__gbr4_v2__daily-monthly/EREEFS_AIMS-CSIRO_gbr4_v2_hydro_daily-monthly-2022-12\" ;\n\t\tNC_CHAR :aims_ncaggregate_firstDate = \"2022-12-01T00:00:00+10:00\" ;\n\t\tNC_CHAR :aims_ncaggregate_inputs = \"[products__ncaggregate__ereefs__gbr4_v2__raw/EREEFS_AIMS-CSIRO_gbr4_v2_hydro_raw_2022-12::MD5:bd27b033d40e598c20348044720deb73]\" ;\n\t\tNC_CHAR :aims_ncaggregate_lastDate = \"2022-12-31T00:00:00+10:00\" ;\n\t\tNC_CHAR :bald__isPrefixedBy = \"prefix_list\" ;\n\t\tNC_CHAR :date_created = \"Sun Dec 11 21:24:39 2022\" ;\n\t\tNC_CHAR :description = \"Aggregation of raw hourly input data (from eReefs AIMS-CSIRO GBR4 Hydrodynamic v2 subset) to daily means. Also calculates mean magnitude of wind and ocean current speeds. Data is regridded from curvilinear (per input data) to rectilinear via inverse weighted distance from up to 4 closest cells.\" ;\n\t\tNC_CHAR :ems_version = \"v1.4.0 rev(6949)\" ;\n\t\tNC_CHAR :history = \"2023-01-24T10:49:00+10:00: vendor: AIMS; processing: None summaries\n2023-01-25T03:48:20+10:00: vendor: AIMS; processing: Daily summaries\" ;\n\t\tNC_CHAR :metadata_link = \"https://eatlas.org.au/data/uuid/350aed53-ae0f-436e-9866-d34db7f04d2e\" ;\n\t\tNC_CHAR :paramfile = \"./prm/gbr4_hydro_nrt.prm\" ;\n\t\tNC_CHAR :paramhead = \"GBR 4km resolution grid\" ;\n\t\tNC_CHAR :prefix_list_puv__ = \"https://w3id.org/env/puv#\" ;\n\t\tNC_CHAR :prefix_list_qudt__ = \"http://qudt.org/vocab/unit/\" ;\n\t\tNC_CHAR :technical_guide_link = \"https://eatlas.org.au/pydio/public/aims-ereefs-platform-technical-guide-to-derived-products-from-csiro-ereefs-models-pdf\" ;\n\t\tNC_CHAR :technical_guide_publish_date = \"2020-08-18\" ;\n\t\tNC_CHAR :title = \"eReefs AIMS-CSIRO GBR4 Hydrodynamic v2 daily aggregation\" ;\n\t\tNC_CHAR :DODS_EXTRA.Unlimited_Dimension = \"time\" ;\n}\n```\n:::\n:::\n\n</details>\n\n\n### 2. Extract data from the server\n\nNow that we have an open connection to a file on the server we need to extract the daily mean temperature at 1.5m depth for the 10th of December. \n\nFrom the summary output above we can see that there is a variable called `temp` and dimensions `time` and `k`. `k` is an index corresponding to different depths. From the table below we see that it is `k=16` which corresponds to a depth of 1.5 m.\n\n<details><summary>Table of eReefs depths corresponding to index `k`</summary>\n\n| Index (k) | Hydrodynamic 1km model | Hydrodynamic and BioGeoChemical 4km model |\n| --------- | ---------------------- | ----------------------------------------- |\n| 1         | -140.00 m              | -145.00 m                                 |\n| 2         | -120.00 m              | -120.00 m                                 |\n| 3         | -103.00 m              | -103.00 m                                 |\n| 4         | -88.00 m               | -88.00 m                                  |\n| 5         | -73.00 m               | -73.00 m                                  |\n| 6         | -60.00 m               | -60.00 m                                  |\n| 7         | -49.00 m               | -49.00 m                                  |\n| 8         | -39.50 m               | -39.50 m                                  |\n| 9         | -31.00 m               | -31.00 m                                  |\n| 10        | -24.00 m               | -23.75 m                                  |\n| 11        | -18.00 m               | -17.75 m                                  |\n| 12        | -13.00 m               | -12.75 m                                  |\n| 13        | -9.00 m                | -8.80 m                                   |\n| 14        | -5.25 m                | -5.55 m                                   |\n| 15        | -2.35 m                | -3.00 m                                   |\n| 16        | -0.50 m                | -1.50 m                                   |\n| 17        | n/a                    | -0.50 m                                   |\n\n</details>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselected_variable <- \"temp\"\n```\n:::\n\n\n\n\n\n**selectedTimeIndex**\n  The time slice in the netCDF file. For example, in the netCDF file \"EREEFS_AIMS-CSIRO_gbr4_v2_hydro_daily-monthly-2010-09.nc\" the time steps are \"days\". This means if you select `selectedTimeIndex=2` it refers to the second day in this file, which is 02/09/2010.\n- **selectedDepthIndex**\n  The depth slice in the netCDF file. See the following table for a mapping of index to value:\n\n  \n\n\n--- \n\n\ninput_file\n# The \"temperature\" variable\nselectedVariable <- \"temp\"\nselectedVariable\n# 2nd of September 2010\nselectedTimeIndex <- 2\nselectedTimeIndex\n# -1.50 m depth\nselectedDepthIndex <- 16\nselectedDepthIndex\n```\n\n\n# Read in the netCDF file contents\nRead in the netCDF file contents and store the latitude, longitude, time and depth data in variables for later use.\n::: {.cell}\n\n```{.r .cell-code}\n# ---------------------------------------\n# ERROR: THIS LINE IS FAILING TO RUN\nnc_data <- nc_open(input_file)\n# (or maybe just taking a very long time)\n# ---------------------------------------\n\nlon <- ncvar_get(nc_data, \"longitude\")\nhead(lon) # look at the first few entries in the longitude vector\nlat <- ncvar_get(nc_data, \"latitude\")\nhead(lat) # look at the first few entries in the latitude vector\ntime <- ncvar_get(nc_data, \"time\")\nhead(time) # look at the first few entries in the time vector\ndepth <- ncvar_get(nc_data, \"zc\")\nhead(depth) # look at the first few entries in the depth vector\n```\n:::\n\nRead in the data from the selected variable and select the time and depth slice.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvariableData.slice <- ncvar_get(\n  nc = nc_data,\n  varid = selectedVariable,\n  start = c(1, 1, selectedDepthIndex, selectedTimeIndex),\n  count = c(length(lon), length(lat), 1, 1)\n)\ndim(variableData.slice)\n```\n:::\n\n\nNow that all data is stored in memory, close the netCDF file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnc_close(nc_data)\nprint(\"file closed\")\n```\n:::\n\n\n\n# Prepare data\n\nSave the data in a raster. We also need to transpose and flip to orient the data correctly.\n\n::: {.cell}\n\n```{.r .cell-code}\nr <- raster(t(variableData.slice), xmn = min(lon), xmx = max(lon), ymn = min(lat), ymx = max(lat), crs = CRS(\"+init=epsg:4326\"))\nr <- flip(r, direction = 'y')\ndim(r)\n```\n:::\n\n\n\n# Plotting\nFinally, plot the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(r)\n```\n:::\n\n\n\n---\n\n# Retry with RNetCDF\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(RNetCDF)\ninput_file <- \"https://thredds.ereefs.aims.gov.au/thredds/dodsC/s3://aims-ereefs-public-prod/derived/ncaggregate/ereefs/gbr4_v2/daily-monthly/EREEFS_AIMS-CSIRO_gbr4_v2_hydro_daily-monthly-2010-09.nc.html\"\ninput_file\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"https://thredds.ereefs.aims.gov.au/thredds/dodsC/s3://aims-ereefs-public-prod/derived/ncaggregate/ereefs/gbr4_v2/daily-monthly/EREEFS_AIMS-CSIRO_gbr4_v2_hydro_daily-monthly-2010-09.nc.html\"\n```\n:::\n\n```{.r .cell-code}\n# The \"temperature\" variable\nselectedVariable <- \"temp\"\nselectedVariable\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"temp\"\n```\n:::\n\n```{.r .cell-code}\n# 2nd of September 2010\nselectedTimeIndex <- 2\nselectedTimeIndex\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\n# -1.50 m depth\nselectedDepthIndex <- 16\nselectedDepthIndex\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 16\n```\n:::\n\n```{.r .cell-code}\nnc_data <- RNetCDF::open.nc(input_file)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlon <- var.get.nc(nc_data, \"longitude\")\nhead(lon) # look at the first few entries in the longitude vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 142.1688 142.1988 142.2288 142.2588 142.2888 142.3188\n```\n:::\n\n```{.r .cell-code}\nlat <- var.get.nc(nc_data, \"latitude\")\nhead(lat) # look at the first few entries in the latitude vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -28.69602 -28.66602 -28.63602 -28.60602 -28.57602 -28.54602\n```\n:::\n\n```{.r .cell-code}\ntime <- var.get.nc(nc_data, \"time\")\nhead(time) # look at the first few entries in the time vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7548 7549 7550 7551 7552 7553\n```\n:::\n\n```{.r .cell-code}\ndepth <- var.get.nc(nc_data, \"zc\")\nhead(depth) # look at the first few entries in the depth vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -145 -120 -103  -88  -73  -60\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvariableData.slice = var.get.nc(\n  ncfile = nc_data, \n  variable = selectedVariable, \n  start = c(1, 1, selectedDepthIndex, selectedTimeIndex), \n  count = c(length(lon), length(lat), 1, 1)\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclose.nc(nc_data)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nr <- raster(t(variableData.slice), xmn = min(lon), xmx = max(lon), ymn = min(lat), ymx = max(lat), crs = CRS(\"+init=epsg:4326\"))\nr <- flip(r, direction = 'y')\ndim(r)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 723 491   1\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}