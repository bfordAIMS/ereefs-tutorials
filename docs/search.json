[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "AIMS eReefs tutorials",
    "section": "",
    "text": "Tutorial\nLanguages\n\n\n\n\nPlotting time series data"
  },
  {
    "objectID": "index_example_sections.html#browse-by-topic",
    "href": "index_example_sections.html#browse-by-topic",
    "title": "AIMS eReefs tutorials",
    "section": "Browse by topic",
    "text": "Browse by topic\n\n\n\nPlotting\n\n\n\nAnalysis\n\n\n\nAnother topic"
  },
  {
    "objectID": "index_example_sections.html#all-available-tutorials",
    "href": "index_example_sections.html#all-available-tutorials",
    "title": "AIMS eReefs tutorials",
    "section": "All available tutorials",
    "text": "All available tutorials\n\n\n\nTutorial\nLanguages\n\n\n\n\nPlotting time series data"
  },
  {
    "objectID": "python_tutorials_home.html",
    "href": "python_tutorials_home.html",
    "title": "AIMS eReefs tutorials",
    "section": "",
    "text": "This is the sub-homepage for the Python tutorials."
  },
  {
    "objectID": "r_tutorials_home.html",
    "href": "r_tutorials_home.html",
    "title": "AIMS eReefs tutorials",
    "section": "",
    "text": "This is the sub-home page for the R tutorials."
  },
  {
    "objectID": "time_series_plot_r.html",
    "href": "time_series_plot_r.html",
    "title": "AIMS eReefs tutorials",
    "section": "",
    "text": "Topics covered\n\nExtracting eReefs data using the online data extraction tool\nSetting up R and RStudio and importing the eReefs data\nInteractive leaflet maps with site coordinates and GBR reef boundaries and labels\nBasic time series plots in ggplot2\nTime series plots with data grouped by year in ggplot2\nTurning ggplot2 plots into interactive plots with plotly\nExploring two-dimensional relationships via scatter plots in ggplot2\n\n\n\nMotivating problem\nHeat waves occur in the shallow waters of the Great Barrier Reef (GBR) in much the same way that they occur on land. When the waters gets too hot for too long, corals become sick and can eventually die (as a result of coral bleaching). As the Earth continues to warm under a changing climate, these heat waves are becoming hotter, longer, and more frequent (REFERENCE HERE), threating the survival of the GBR as we know it.\nDifferent coral populations along the GBR are adapted to the long-term temperature ranges which may be considered normal for the area in which they live. In general, this means that the northern populations are better able to handle warmer waters than their southern counterparts. Some of these adaptations are encoded in the their genomes and we can imagine that the spread of these warm-adpated genes to the southern GBR would confer some level of resilience to future heat wave events.\nHowever, major ocean currents along the GBR bifurcate, i.e. split, off the coast of Cairns (Figure @ref(fig:figCurrents)), creating prevailing northward currents in the waters to the north. It has been suggested that these northward currents may act as a genetic barrier for corals, preventing coral larvae from travelling south and spreading their genes into the Southern GBR.\nWe wish to examine this phenomena on a finer scale to get a sense of how strong and persistant this genetic barrier may be.\n\n\n\n\n\neReefs 2016 yearly mean temperatures (left) and currents (right) for the Great Barrier Reef showing north-to-south temperature gradient and current bifurcation north-east of Cairns (shown in red and orange).\n\n\n\n\n\n\neReefs data extraction\nData was extracted from the eReefs GBR Hydrological Model (4km) v2.0, using the online data extraction tool, for a single point approximately 60 km south of Lizard Island (shown in Figure @ref(fig:plotSite)). For this point we extracted the daily aggregated data for the northward current at a depth of 0.5 m (as coral larvae travel, in general, in the top of the water column) and the northward windspeed (to see if the wind may be a key driver of current speed and direction). Both of these variables have the units of meters per second (m/s), where a positive value indicates the speed of the wind to the north, and a negative value, to the south. We extracted all data between 1 September 2010 - 1 September 2022.\nThis data can be downloaded here. !Replace link after upload (so github tutorial link can be added to data page)!\n\n\nR and R Studio setup\n\nDownload and install R (the programming language) and R Studio (the integrated development environment) following the instructions here.\n[Download the git repository for this tutorial]LINK HERE, and unzip the folder in a suitable place on your hard drive.\nOpen R Studio and create a new project: File > New Project > Existing Directory > Browse > select the unzipped git tutorial folder created in step 2.\nOpen the file tutorial__time_series.Rmd and run the code chunk below by clicking the  button in the top right corner. Chunks can also be run be pressing ctrl+shift+enter and sections of code (e.g. half a line, a single line, multiple lines) can be run by selecting the section and pressing ctrl+enter (replace ctrl with cmd on Mac).\n\n\n# Install the R packages required for this tutorial\nrequired_packages <- c(\"readr\", \"tidyverse\", \"janitor\", \"leaflet\", \"lubridate\", \"plotly\", \"fontawesome\", \"htmltools\")\ninstalled_packages <- installed.packages()[, \"Package\"] # list of pkgs already installed\nnot_yet_installed <- required_packages[!(required_packages %in% installed_packages)]\nif (length(not_yet_installed) > 0) install.packages(not_yet_installed) # install pkgs not yet installed\n\n\n\nImport data into R\nFirst we need to load in the R packages we will use for this tutorial.\n\n# Load R packages:\nlibrary(readr) # faster data importing\nlibrary(tidyverse) # a suite of packages including dplyr, tidyr, ggplot2, stringr\nlibrary(janitor) # create better variable names\nlibrary(leaflet) # making interactive maps\nlibrary(lubridate) # easier handling of dates and times \nlibrary(plotly) # making interactive plots\nlibrary(fontawesome) # to put icons in R markdown html\nlibrary(htmltools) # for styling interactive outputs\n\n# Load our custom function to create time series ggplots with data grouped by year \n# (or a given period <= 12 years) \nsource(\"time-series-plot-r-files/ggTS_byYear.R\") # we will go through this function later in the tutorial\n\nThe data we have extracted from eReefs is in a CSV file, in the ‘data’ folder. We will import the data into R using the readr package’s read_csv function (which is much faster at reading in large datasets compared to R’s base function read.csv). We will then apply the janitor package’s clean_names function, which will format the variable names in a way which is much more convenient for use in R.\n\n# Import data:\ndata_raw <- read_csv(\"time-series-plot-r-files/data/eReefsData.csv\")\ndata <- data_raw %>% clean_names()\ndata %>% glimpse() # take a 'glimpse' at our data\n\nRows: 8,766\nColumns: 12\n$ aggregated_date_time <dttm> 2010-09-01, 2010-09-01, 2010-09-02, 2010-09-02, …\n$ variable             <chr> \"wspeed_v\", \"v\", \"wspeed_v\", \"v\", \"wspeed_v\", \"v\"…\n$ depth                <dbl> 99999.9, -0.5, 99999.9, -0.5, 99999.9, -0.5, 9999…\n$ site_name            <chr> \"site_a\", \"site_a\", \"site_a\", \"site_a\", \"site_a\",…\n$ latitude             <dbl> -15.25, -15.25, -15.25, -15.25, -15.25, -15.25, -…\n$ longitude            <dbl> 145.46, 145.46, 145.46, 145.46, 145.46, 145.46, 1…\n$ mean                 <dbl> 6.17655035, 0.11174639, 5.97394102, 0.11343298, 7…\n$ median               <dbl> 6.26913939, 0.14671343, 6.04144896, 0.11044985, 7…\n$ p5                   <dbl> 5.346766602, 0.000353042, 5.447607187, 0.07272162…\n$ p95                  <dbl> 7.231647611, 0.200932400, 6.545938471, 0.20063861…\n$ lowest               <dbl> 5.2204528552, 0.0000000000, 5.3579356785, 0.06825…\n$ highest              <dbl> 7.231647611, 0.200932400, 6.545938471, 0.20063861…\n\n# Print the range of dates in our data:\npaste(\"Date range:\", min(data$aggregated_date_time), \"to\", max(data$aggregated_date_time))\n\n[1] \"Date range: 2010-09-01 to 2022-08-31\"\n\n\nHere we can see that we have data for the wspeed_v (northward wind velocity) and v (northward current velocity) for our single site site_a with the coordinates (145.46, -15.25). As we have downloaded the daily aggregated data, we get the mean, median, p5 (5th percentile), p95 (95th percentile), lowest and highest values for each day between 1 September 2010 through 31 August 2022.\n\n\nSite map with leaflet\nLets have a closer look at the site for which we have extracted the eReefs data by plotting it on an interactive leaflet map along with the GBR reef features. The GBR reef features layer is located in the eAtlas Web Mapping Service (AIMS). A list of other layers available in this server can be found here.\nYou can find out more about creating leaflet maps in R here.\n\n# Get unique coordinates from data (in this case only one set of lat/lon)\nsite_coords <- data.frame(\n  lat = unique(data_raw$Latitude), \n  lon = unique(data_raw$Longitude)\n)\n# Plot coordinates on a leaflet map\nsite_map <- site_coords %>% \n    leaflet( # create a blank leaflet map\n      options = leafletOptions(attributionControl=FALSE) # remove the 'leaflet' watermark\n    ) %>% \n    addTiles() %>% # adds a basemap (OpenStreetMap by default)\n    addMarkers() %>% # add a marker at the given coordinates\n    addScaleBar()\n\n# Add the GBR reef features (WMS layer) to the map\nsite_map <- site_map %>% \n    addWMSTiles(\n      baseUrl = \"https://maps.eatlas.org.au/maps/wms?\", # Link to WMS server\n      layers = c(\"ea:GBR_GBRMPA_GBR-features\"), # Names of layers (located in the WMS server) to display\n      options = WMSTileOptions(format = \"image/png\", transparent = TRUE)\n    ) \n                \n# Display the map centred at our site\nsite_map %>% \n    setView(lng = site_coords$lon[1], lat = site_coords$lat[1], zoom = 9)\n\n\n\nInteractive map showing site for which eReefs data was extracted.\n\n\n\n\nTime series plot with ggplot2\nSince we are interested in gaining some insight into the possibility of northern coral larvae migrating southward through our site, we should have a look at the north-south current velocity data.\n\ndata %>% \n  filter(variable == \"v\") %>% # select the current variable\n  ggplot(aes(x = aggregated_date_time, y = mean)) + # and plot the daily mean\n  geom_line(alpha=0.7) + # specify a line graph of the mean\n  geom_abline(slope = 0, intercept = 0, color = \"red\", size = 1) + # add a line a y=0\n  scale_x_datetime(date_breaks = \"1 year\", date_labels = \"%Y\") + # show only years on x-axis\n  theme_bw() + \n  labs(x = \"Year\", y = \"Northward current velocity (m/s)\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\nTime series plot of daily mean northward current velocity.\n\n\n\n\nHere we see that there does appear to be a cyclical pattern to the northward current at our site, with southward currents (i.e. negative northward current) primarily in the wet season. This is great news, as this is when coral spawning occurs!\nHowever, in order to get a better idea of what is happening, we should have a closer look at the data for the coral spawning period of roughly October - January.\n\n\nTime series plot (advanced)\nWe wish to produce the plot below, looking at all our data in an approximate coral spawning season of October through January, for each of the years in our data.\n\n\n\n\n\nTimes series plot of daily mean northward current velocity during October through January for each year 2010-11 to 2021-22.\n\n\n\n\nThe first thing we can note, from this plot, is that it is very cluttered, making it difficult to detect any clear trend in our data. However, before we investigate this further, lets look at how the plot was made.\nUnfortunately, there does not seem to be any out-of-the-box or intuitive ways to plot a given season (i.e. period less than 12 months) for multiple years in ggplot. However, we can hack a solution by writing a function called ggTS_byYear which creates a fake date variable where all the data is converted to be in the same year and then plots this fake date along the x-axis and groups the data based on the real date. This function is defined below.\nYou can copy and paste this function into your script if you would just like to get to using it straight away. However, it is also heavily commented should you wish to customise it further, troubleshoout an errors you are encountering when using it, or fix any unforeseen bugs which may be present.\nNote: if troubleshooting, consider using R function browser.\n\n########################################################################\n## PLOT TIME SERIES BY YEAR OVER A GIVEN PERIOD <= 12 MONTHS          ##\n## ------------------------------------------------------------------ ##\n## RETURNS: ggplot object (without geoms)                             ##\n## REQUIRES: ggplot, dplyr, magritter, lubridate                      ##\n## ------------------------------------------------------------------ ##\n## Example:                                                           ##\n##    salinity_time_series_plot <-                                    ##\n##      ggTS_byYear(                                                  ##\n##        data = eReefs_data,                                         ##\n##        date_col_name = date_time,                                  ##\n##        response_col_name = daily_mean_salinity,                    ##\n##        start_month = 6,                                            ##\n##        end_month = 5                                               ##\n##      ) +                                                           ##\n##      geom_line() +                                                 ##\n##      labs(y = \"Daily mean salinity\", x = \"Date\", colour = \"Year\")  ##\n##                                                                    ##\n## Warning: not designed for plot periods > 12 months                 ##\n##                                                                    ##\n## Function concept: fake year(s) is used to put data for all years   ##\n##                   on same x-axis, where as plot period denotes     ##\n##                   real year(s)pertaining to the data dates         ##\n##                                                                    ##\n## Note: x-axis major breaks are months, if a different period is     ##\n##       required, use the ggplot2::scale_x_datetime() function       ##\n########################################################################\nggTS_byYear <- function(\n    data, # dataframe with POSIX dates and continuous response\n    date_col_name, # the name of the dataframe column with the date variable to plot\n    response_col_name, # the name of the dataframe column with the response variable to plot\n    start_month = 1, # lower time series limit (default January)\n    end_month = 12, # upper time series limit (default December)\n    minor_breaks_period = \"1 day\" # the period for the graph's x-axis minor breaks (e.g. 1 week, 1 day)\n) {\n  # SETUP\n  require(ggplot2)  # for plotting\n  require(magrittr) # source of the pipe (%>%) function\n  require(dplyr)    # data manipulation\n  require(lubridate) # date handling\n  fake_year <- 0001 # fake year used to have all dates over same period (grouped by real year)\n  \n  # APPEND VARIABLES TO DATA FOR USE IN PLOTTING\n  data = data %>%  \n    mutate(\n      datetime = as_datetime({{date_col_name}}), # Ensure dates in POSIX format\n      year = year(datetime), # Create columns for real year and\n      month = month(datetime) # real month\n    )\n  \n  # THE CASE WHEN THE PLOT PERIOD IS WITHNIN A SINGLE CALENDER YEAR (e.g. June 2016 - Nov 2016)\n  if (start_month <= end_month) {\n    # Get x-axis breaks and labels:\n    plot_months = c(start_month:(end_month+1)) # vector of months to plot (including end_month)\n    plot_breaks = make_datetime(fake_year, plot_months) # x-axis major breaks at each month\n    # Assign data to plot periods and fake years and filter out data not needed:\n    data <- data %>% \n      mutate(\n        # Plot period is within the real year (e.g. June 2016 - October 2016) \n        plot_period_label = paste(year), # data for all months pertain to respective year\n        dummy_date = update(datetime, year = fake_year) # all data plotted over fake year (e.g. 0001)\n      ) %>% \n      filter(month >= start_month & month <= end_month)\n  }\n  \n  # THE CASE WHEN THE PLOT PERIOD IS SPREAD ACROSS TWO CALENDER YEARS (e.g. Nov 2016 - June 2017)\n  if (start_month > end_month) {\n    # Get x-axis breaks and labels\n    plot_months_y1 = c(start_month:12) # a vector of months to plot in the former year\n    plot_months_y2 = c(1:(end_month+1)) # a vector of months to plot in the latter year\n    plot_months = c(plot_months_y1, plot_months_y2)\n    plot_breaks <- c(\n      make_datetime(fake_year, plot_months_y1),\n      make_datetime(fake_year+1, plot_months_y2)\n    ) \n    # Assign data to plot periods (i.e. based on real dates), create the fake date \n    # (using fake_year and fake_year +1), and filter out data not needed:\n    data <- data %>% \n      mutate(\n        # Plot period crosses two calender years, therefore\n        # data for months prior to start_month pertain to preceding plot period\n        plot_period_start = ifelse(month >= start_month, year, year-1), \n        plot_period_end = plot_period_start+1,\n        plot_period_label = paste(plot_period_start, substr(plot_period_end, 3, 4), sep = '-'), \n        # Dummy dates: months after start_month plotted in fake year (e.g. 0001), months prior plotted in 0002\n        dummy_year = ifelse(month >= start_month, fake_year, fake_year + 1), \n        dummy_date = update(datetime, year = dummy_year)\n      ) %>% \n      filter(month >= start_month | month <= end_month)\n  }\n  \n  # CREATE X-AXIS (DATES) BREAK LABELS \n  # If end_month is 12 (December), plot_months ends at 13 (January of next year)\n  plot_months <- replace(plot_months, plot_months==13, 1) # Change 13 to 1\n  break_labels <- month.abb[plot_months]\n\n  # CREATE PLOT\n  ts_plot <- data %>% \n    ggplot(aes(x = dummy_date, y = {{response_col_name}}, group = plot_period_label, colour = plot_period_label)) + \n    labs(x = \"Date\", y = \"Response\",  colour = \"Year\") + \n    theme_bw() + \n    scale_x_datetime(breaks = plot_breaks, labels = break_labels, date_minor_breaks = minor_breaks_period)\n\n  return(ts_plot)\n}\n\nNow we have our function definition, lets see it in action. Recall that our previous plot was quite cluttered, which made it difficult to discern any trends in the data. So this time, let’s plot for just the month of October.\n\ndata %>% \n  filter(variable == \"v\") %>%\n  ggTS_byYear(aggregated_date_time, mean, start_month=10, end_month=10) + \n  geom_line(size=0.7) + \n  geom_abline(slope = 0, intercept = 0, size = 0.8) + \n  labs(y = \"Northward current velocity (m/s)\")\n\n\n\n\nTimes series plot of daily mean northward current velocity during October for each year 2010 to 2021.\n\n\n\n\nThis is significantly easier to digest. However, there is still a lot going on, and sometimes we may wish to see more than a single month at a time.\n\n\nInteractive plots with plotly\nIn R, we can create interactive plots with the plotly package.\nWith a plotly interactive plot, we can view individual years, compare subsets of the years, and zoom in on our data and pan across. As this interactivity is a virtue of the html file format, plotly plots have limited application (e.g. cannot be used for reports). However, they do allow us to explore our data very easily and intuitively.\nLet’s plot our data across an entire year and use the zoom and pan features to explore in more detail. Let’s plot the graph from September through August, as this aligns with the dates for the data we have extracted. Note that the years are selectable/deselectable from the plot legend, where we can also double click a year to toggle between all years and just the single year, and that when zooming we drag the cursor to zoom and double click to zoom back out.\nWe will initially show only the years 2015-16 and 2021-22, as this provides a nice instance of high variability in the northward current in different years.\n\n# Create a ggplot and turn it into a plotly plot\nplotJanDec <- data %>% \n  filter(variable == \"v\") %>%\n  ggTS_byYear(aggregated_date_time, mean, start_month=9, end_month=8) +\n  geom_line(size=0.7) + \n  geom_abline(slope = 0, intercept = 0, size = 0.5) + \n  labs(y = \"Northward current velocity (m/s)\") + \n  theme(legend.position=\"top\")\n\nplotJanDec %>% \n  ggplotly(tooltip = \"none\") %>% # don't show any information on hover (alternative: \"mean\" would show mean current)\n  style(visible = \"legendonly\", traces = c(1:5, 7:11))  # don't show years 2010-2014 & 2016-2020 initially\n\n\n\nInteractive plot of daily mean northward current velocity for September through August 2010-11 to 2021-22 (double click years to toggle display of all years).\n\n\nThis plot allows us to see what is happening both in individual years and overall, across all the years.\nOverall we see the trend that we have seen in Figure @ref(fig:plotTS) where the current is predominantly to the north (positive value), and less variable, in (roughly) April through July with southward currents becoming more frequent and strong in August and peaking in (roughly) September through March.\nZooming in to our approximate coral spawning season of October through January, we can see that there are often periods of predominant southward currents, however when these periods occur is highly variable between years.\n\n\nExploring wind and current\nSince we are interested in the surface current (i.e. we have data for northward current at 0.5 m depth), it seems reasonable to suspect that the wind may be a key driving force behind the current direction and velocity. Let’s examine this suspicion with by looking at the relationship between the mean northward wind and current speeds.\n\n# Create a wide format dataset (seperate columns for mean current and wind)\nmeanWindCurr <- data %>% \n  select(aggregated_date_time, variable, mean) %>% # remove unneeded variables\n  pivot_wider(names_from = variable, values_from = mean) %>% \n  mutate(year = aggregated_date_time %>% year())\n\n# Compute Pearson's correlation coefficient for the northward daily mean current and windspeed\nr = cor.test(meanWindCurr$wspeed_v, meanWindCurr$v, method = \"pearson\")\n\n# Dual timeseries plot of windspeed and current\nlabs <- c(\"Northward current velocity (m/s)\", \"Northward wind speed (m/s)\")\nnames(labs) <- c(\"v\", \"wspeed_v\") \ndata %>%\n  ggplot(aes(x = aggregated_date_time, y = mean)) + # and plot the daily mean\n  geom_line(alpha=0.7) + # specify a line graph of the mean\n  geom_hline(yintercept = 0, color = \"red\", size = 0.5) + # add a line a y=0\n  geom_vline(xintercept = 2011:2022, color = \"red\") + \n  scale_x_datetime(date_breaks = \"1 year\", date_labels = \"%Y\")+ # show only years on x-axis\n  theme_bw() + \n  theme(panel.grid.major.x = element_line(color = \"black\", size = 0.5, linetype = \"dotted\"),\n        panel.grid.minor.x = element_line(color = \"grey\", size = 0.5, linetype = \"dotted\"),  \n        panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank()) + \n  labs(x = \"Year\", y = \"Daily mean\") + \n  facet_wrap(~variable, nrow = 2, scales= \"free_y\", labeller = labeller(variable = labs))\n\nWarning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\n\n\n\n\nTime series of daily mean northward current and wind velocities for September 2010 to September 2022.\n\n\n\n\nIn Figure @ref(fig:figWindCurrLine) we can see that there appears to be a reasonably close relationship between the daily mean northward wind speed and current velocity. This is supported by a Pearson’s correlation coefficient of \\(r=\\) 0.79. We can better visualise this relationship on the scatterplot in Figure @ref(fig:figWindCurrScatter).\nFrom this data alone we cannot conclude that wind is a driver of current, as it may just be a confounding variable. However, we have at least found a reasonably strong positive relationship between northward windspeed and current.\n\n# Scatter plot of daily mean wind and current\nmeanWindCurr %>% \n  ggplot(aes(x = wspeed_v, y = v)) +\n  geom_point(alpha = 0.2, size = 2) + \n  geom_hline(yintercept = 0, colour = \"grey\") + \n  geom_vline(xintercept = 0, colour = \"grey\") + \n  theme_bw() + \n  labs(x = \"Northward wind speed (m/s)\", y = \"Northward current velocity (m/s)\")\n\n\n\n\nScatter plot of daily mean northward wind and current velocities for September 2010 to September 2022.\n\n\n\n\n\n\nConclusions and limitations\nWhile it would be nice to draw some conclusions from our analyses about the possibility of northern coral larvae migrating into the southern GBR, the reality is that we can’t. Coral larve travel on complex paths and predicting these paths is an active and highly sophisticated area of research (find out more here; see a real approach to answering this question here). Unfortunately, this question is just too complicated for any real insights to be gained from data for only a single site. But, at the very least, we did make some nice graphs!\nWe also saw that there are indeed periods of southward currents at our site, and these southward currents are most prevalent between the months of (roughly) October through February, and are particularly uncommon between April through June. We have shown that there is a positive relationship between the northward windspeed and northward current for our site."
  }
]