[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "AIMS eReefs tutorials",
    "section": "",
    "text": "Tutorial\nLanguages\n\n\n\n\nPlotting time series data"
  },
  {
    "objectID": "index_example_sections.html#browse-by-topic",
    "href": "index_example_sections.html#browse-by-topic",
    "title": "AIMS eReefs tutorials",
    "section": "Browse by topic",
    "text": "Browse by topic\n\n\n\nPlotting\n\n\n\nAnalysis\n\n\n\nAnother topic"
  },
  {
    "objectID": "index_example_sections.html#all-available-tutorials",
    "href": "index_example_sections.html#all-available-tutorials",
    "title": "AIMS eReefs tutorials",
    "section": "All available tutorials",
    "text": "All available tutorials\n\n\n\nTutorial\nLanguages\n\n\n\n\nPlotting time series data"
  },
  {
    "objectID": "python_tutorials_home.html",
    "href": "python_tutorials_home.html",
    "title": "AIMS eReefs tutorials",
    "section": "",
    "text": "This is the sub-homepage for the Python tutorials."
  },
  {
    "objectID": "r_tutorials_home.html",
    "href": "r_tutorials_home.html",
    "title": "AIMS eReefs tutorials",
    "section": "",
    "text": "This is the sub-home page for the R tutorials."
  },
  {
    "objectID": "time-series-plot-r/time_series_plot_r.html",
    "href": "time-series-plot-r/time_series_plot_r.html",
    "title": "AIMS eReefs tutorials",
    "section": "",
    "text": "Extracting eReefs data using the online data extraction tool\nSetting up R and RStudio and importing the eReefs data\nInteractive leaflet maps with reef boundaries\nBasic time series plots in ggplot2\nTime series plots with data grouped by year in ggplot2\nInteractive plots with plotly\nExploring two-dimensional relationships with scatter plots in ggplot2"
  },
  {
    "objectID": "time-series-plot-r/time_series_plot_r.html#basic",
    "href": "time-series-plot-r/time_series_plot_r.html#basic",
    "title": "AIMS eReefs tutorials",
    "section": "Basic",
    "text": "Basic\nSince we are interested in gaining some insight into the possibility of northern coral larvae migrating southward through our site, we should have a look at the north-south current velocity data.\n\ndata %>% \n  filter(variable == \"v\") %>% # select the current variable\n  ggplot(aes(x = aggregated_date_time, y = mean)) + # and plot the daily mean\n  geom_line(alpha=0.7) + # specify a line graph of the mean\n  geom_abline(slope = 0, intercept = 0, color = \"red\", linewidth = 1) + # add a line a y=0\n  scale_x_datetime(date_breaks = \"1 year\", date_labels = \"%Y\") + # show only years on x-axis\n  theme_bw() + \n  labs(x = \"Year\", y = \"Northward current velocity (m/s)\")\n\n\n\n\nTime series plot of daily mean northward current velocity.\n\n\n\n\nHere we see that there does appear to be a cyclical pattern to the northward current at our site, with southward currents (i.e. negative northward current) primarily in the wet season. This is great news, as this is when coral spawning occurs!\nHowever, in order to get a better idea of what is happening, we should have a closer look at the data for the coral spawning period of roughly October - January."
  },
  {
    "objectID": "time-series-plot-r/time_series_plot_r.html#advanced",
    "href": "time-series-plot-r/time_series_plot_r.html#advanced",
    "title": "AIMS eReefs tutorials",
    "section": "Advanced",
    "text": "Advanced\nWe wish to produce the plot below, looking at all our data in an approximate coral spawning season of October through January, for each of the years in our data.\n\n\n\n\n\nTimes series plot of daily mean northward current velocity during October through January for each year 2010-11 to 2021-22.\n\n\n\n\nThe first thing we can note, from this plot, is that it is very cluttered, making it difficult to detect any clear trend in our data. However, before we investigate this further, lets look at how the plot was made.\nUnfortunately, there does not seem to be any out-of-the-box or intuitive ways to plot a given season (i.e. period less than 12 months) for multiple years in ggplot. However, we can hack a solution by writing a function called ggTS_byYear which creates a fake date variable where all the data is converted to be in the same year and then plots this fake date along the x-axis and groups the data based on the real date. This function is defined below.\nYou can copy and paste this function into your script if you would just like to get to using it straight away. However, it is also heavily commented should you wish to customise it further, troubleshoout an errors you are encountering when using it, or fix any unforeseen bugs which may be present.\nNote: if troubleshooting, consider using R function browser.\n\n########################################################################\n## PLOT TIME SERIES BY YEAR OVER A GIVEN PERIOD <= 12 MONTHS          ##\n## ------------------------------------------------------------------ ##\n## RETURNS: ggplot object (without geoms)                             ##\n## REQUIRES: ggplot, dplyr, magritter, lubridate                      ##\n## ------------------------------------------------------------------ ##\n## Example:                                                           ##\n##    salinity_time_series_plot <-                                    ##\n##      ggTS_byYear(                                                  ##\n##        data = eReefs_data,                                         ##\n##        date_col_name = date_time,                                  ##\n##        response_col_name = daily_mean_salinity,                    ##\n##        start_month = 6,                                            ##\n##        end_month = 5                                               ##\n##      ) +                                                           ##\n##      geom_line() +                                                 ##\n##      labs(y = \"Daily mean salinity\", x = \"Date\", colour = \"Year\")  ##\n##                                                                    ##\n## Warning: not designed for plot periods > 12 months                 ##\n##                                                                    ##\n## Function concept: fake year(s) is used to put data for all years   ##\n##                   on same x-axis, where as plot period denotes     ##\n##                   real year(s)pertaining to the data dates         ##\n##                                                                    ##\n## Note: x-axis major breaks are months, if a different period is     ##\n##       required, use the ggplot2::scale_x_datetime() function       ##\n########################################################################\nggTS_byYear <- function(\n    data, # dataframe with POSIX dates and continuous response\n    date_col_name, # the name of the dataframe column with the date variable to plot\n    response_col_name, # the name of the dataframe column with the response variable to plot\n    start_month = 1, # lower time series limit (default January)\n    end_month = 12, # upper time series limit (default December)\n    minor_breaks_period = \"1 day\" # the period for the graph's x-axis minor breaks (e.g. 1 week, 1 day)\n) {\n  # SETUP\n  require(ggplot2)  # for plotting\n  require(magrittr) # source of the pipe (%>%) function\n  require(dplyr)    # data manipulation\n  require(lubridate) # date handling\n  fake_year <- 0001 # fake year used to have all dates over same period (grouped by real year)\n  \n  # APPEND VARIABLES TO DATA FOR USE IN PLOTTING\n  data = data %>%  \n    mutate(\n      datetime = as_datetime({{date_col_name}}), # Ensure dates in POSIX format\n      year = year(datetime), # Create columns for real year and\n      month = month(datetime) # real month\n    )\n  \n  # THE CASE WHEN THE PLOT PERIOD IS WITHNIN A SINGLE CALENDER YEAR (e.g. June 2016 - Nov 2016)\n  if (start_month <= end_month) {\n    # Get x-axis breaks and labels:\n    plot_months = c(start_month:(end_month+1)) # vector of months to plot (including end_month)\n    plot_breaks = make_datetime(fake_year, plot_months) # x-axis major breaks at each month\n    # Assign data to plot periods and fake years and filter out data not needed:\n    data <- data %>% \n      mutate(\n        # Plot period is within the real year (e.g. June 2016 - October 2016) \n        plot_period_label = paste(year), # data for all months pertain to respective year\n        dummy_date = update(datetime, year = fake_year) # all data plotted over fake year (e.g. 0001)\n      ) %>% \n      filter(month >= start_month & month <= end_month)\n  }\n  \n  # THE CASE WHEN THE PLOT PERIOD IS SPREAD ACROSS TWO CALENDER YEARS (e.g. Nov 2016 - June 2017)\n  if (start_month > end_month) {\n    # Get x-axis breaks and labels\n    plot_months_y1 = c(start_month:12) # a vector of months to plot in the former year\n    plot_months_y2 = c(1:(end_month+1)) # a vector of months to plot in the latter year\n    plot_months = c(plot_months_y1, plot_months_y2)\n    plot_breaks <- c(\n      make_datetime(fake_year, plot_months_y1),\n      make_datetime(fake_year+1, plot_months_y2)\n    ) \n    # Assign data to plot periods (i.e. based on real dates), create the fake date \n    # (using fake_year and fake_year +1), and filter out data not needed:\n    data <- data %>% \n      mutate(\n        # Plot period crosses two calender years, therefore\n        # data for months prior to start_month pertain to preceding plot period\n        plot_period_start = ifelse(month >= start_month, year, year-1), \n        plot_period_end = plot_period_start+1,\n        plot_period_label = paste(plot_period_start, substr(plot_period_end, 3, 4), sep = '-'), \n        # Dummy dates: months after start_month plotted in fake year (e.g. 0001), months prior plotted in 0002\n        dummy_year = ifelse(month >= start_month, fake_year, fake_year + 1), \n        dummy_date = update(datetime, year = dummy_year)\n      ) %>% \n      filter(month >= start_month | month <= end_month)\n  }\n  \n  # CREATE X-AXIS (DATES) BREAK LABELS \n  # If end_month is 12 (December), plot_months ends at 13 (January of next year)\n  plot_months <- replace(plot_months, plot_months==13, 1) # Change 13 to 1\n  break_labels <- month.abb[plot_months]\n\n  # CREATE PLOT\n  ts_plot <- data %>% \n    ggplot(aes(x = dummy_date, y = {{response_col_name}}, group = plot_period_label, colour = plot_period_label)) + \n    labs(x = \"Date\", y = \"Response\",  colour = \"Year\") + \n    theme_bw() + \n    scale_x_datetime(breaks = plot_breaks, labels = break_labels, date_minor_breaks = minor_breaks_period)\n\n  return(ts_plot)\n}\n\nNow we have our function definition, lets see it in action. Recall that our previous plot was quite cluttered, which made it difficult to discern any trends in the data. So this time, let’s plot for just the month of October.\n\ndata %>% \n  filter(variable == \"v\") %>%\n  ggTS_byYear(aggregated_date_time, mean, start_month = 10, end_month = 10) + \n  geom_line(linewidth = 0.7) + \n  geom_abline(slope = 0, intercept = 0, linewidth = 0.8) + \n  labs(y = \"Northward current velocity (m/s)\")\n\n\n\n\nTimes series plot of daily mean northward current velocity during October for each year 2010 to 2021.\n\n\n\n\nThis is significantly easier to digest. However, there is still a lot going on, and sometimes we may wish to see more than a single month at a time."
  }
]